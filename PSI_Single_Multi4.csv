ID Sypanie,Obrazok,"Nazov (odstranit cisla, skonzistentnit a spresnit)",Kategoria (vybrat jedno z dodaneho zoznamu),Do nultej verzie,Otazka,Koncepty,Kapitola,Subkapitola,"Typ otazky (single choice, multi-choice, ano-nie, volny text,…)",Spravna odpoved,"Moznosti, ak boli k dispozicii",Obtiaznost (impossible/tazke/stredne/lahke/trivialne),XML,Pressman
494,,Nevhodné názvy entít v diagrame modelu údajov,strukturne_modely,y,"Určte, ktoré názvy NIE sú vhodné pre dátovú entitu:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Študenti;Cvičenia;ID;Matematická Analýza;,<correct>Študenti</correct>;Učiteľ;Predmet;<correct>Cvičenia</correct>;<correct>ID</correct>;<correct>Matematická Analýza</correct>;Prednášková sála;,trivialne,questions/psi-op-q-001mk.xml,
495,,Názvy hráčov v diagrame prípadov použitia,funkcionalne_modely,y,Vyberte vhodné názvy pre hráčov v diagrame prípadov použitia:,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Zákazník;Platobný systém;Čas;Učiteľ;,Používatelia;<correct>Zákazník</correct>;Algoritmus;<correct>Platobný systém</correct>;<correct>Čas</correct>;GUI;<correct>Učiteľ</correct>;,trivialne,questions/psi-op-q-001pl.xml,
496,,Primárny kľúč v diagrame modelu údajov,strukturne_modely,y,Určte najvhodnejší atribút pre primárny kľúč:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,ISBN;,Dátum vydania;Priezvisko;Rodné číslo;<correct>ISBN</correct>;Adresa;Telefónne číslo;,trivialne,questions/psi-op-q-002mk.xml,
497,,Čo platí o sekvenčnom diagrame,modely_spravania,y,"Vyber tvrdenia, ktoré platia o sekvenčnom diagrame:","UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,Základnými entitami sú objekt a správa.;Znázorňuje interakcie medzi objektami v časovej postupnosti.;Modeluje dynamické správanie systému.;,<correct>Základnými entitami sú objekt a správa.</correct>;Obsahuje vzťahy medzi objektami.;Modeluje štruktúru systému.;<correct>Znázorňuje interakcie medzi objektami v časovej postupnosti.</correct>;<correct>Modeluje dynamické správanie systému.</correct>;Znázorňuje tok riadenia medzi činnosťami systému.;Je ekvivalentný s diagramom tried.;,lahke,questions/psi-op-q-002ok.xml,
498,,Millerovo pravidlo,modelovanie_softveru ,,Čo hovorí Millerovo pravidlo?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Človek sa v danom čase môže sústrediť na 7 +- 2 kusy informácií.;,Diagramy by mali obsahovať maximálne 10 zmysluplných entít.;Človek dokáže vnímať diagram o veľkosti maximálne polovici A4.;<correct>Človek sa v danom čase môže sústrediť na 7 +- 2 kusy informácií.</correct>;Diagramy by mali byť na prvý pohľad prehľadné.;Človek nedokáže naraz porovnávať viac ako 2 diagramy.;Človek sa dokáže sústrediť najviac na 5 zložitejších informácií.;,lahke,questions/psi-op-q-002pl.xml,
499,,Diagram modelu údajov kardinalita primárneho kľúča,strukturne_modely,y,"Určte aká môže byť kardinalita väzby pri entite, ktorá definuje primárny kľúč pre túto väzbu:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,0;1;,<correct>0</correct>;<correct>1</correct>;M;,lahke,questions/psi-op-q-003mk.xml,
500,,Diagram komunikácií,modely_spravania,y,Diagram komunikácií je sémanticky ekvivalentný:,"UML, diagram komunikácie, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.02 Diagram komunikácie,single-choice,so sekvenčným diagramom.;,so stavovým diagramom.;<correct>so sekvenčným diagramom.</correct>;s diagramom tried.;s diagramom prípadov použitia.;,trivialne,questions/psi-op-q-003ok.xml,
501,,Rovnováha údajov v diagrame tokov údajov,funkcionalne_modely,,"Čo znamená ""rovnováha údajov"" pri diagrame tokov údajov?","funkcionálny model, diagram tokov údajov, modelovanie",07 Funkcionálne modely,07.03 Diagram tokov údajov,single-choice,Na každej úrovni rozpoznávame rovnaké údaje.;,Objem vstupných aj výstupných údajov musí byť rovnaký.;Údaje na prvej úrovni sa musia zhodovať s údajmi na poslednej úrovni.;Súčet všetkých rozdielov medzi vstupnými a výstupnými údajmi každej úrovne musí byť rovný 0.;<correct>Na každej úrovni rozpoznávame rovnaké údaje.</correct>;Objem vstupných údajov do diagramu musí zodpovedať počtu dátových entít v tomto diagrame.;,stredne,questions/psi-op-q-003pl.xml,
502,,Väzobná entita v diagrame modelu údajov,strukturne_modely,y,Väzobná dátová entita sa používa pri vzťahoch:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,M:N;,1:1;1:M;<correct>M:N</correct>;,trivialne,questions/psi-op-q-004mk.xml,
503,,Čo platí o stavovovom diagrame,modely_spravania,y,"Vyber tvrdenia, ktoré platia:","UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,multi-choice,Stavový diagram môže byť viacúrovňový.;Je to prostriedok na vyjadrenie kauzálnych a časových súvislostí akcií a stavov v systéme.;,"Modeluje systém ako sieť procesov, ktoré spracúvajú údaje v systéme.;<correct>Stavový diagram môže byť viacúrovňový.</correct>;Stavový diagram je špeciálnym druhom diagramu činností.;<correct>Je to prostriedok na vyjadrenie kauzálnych a časových súvislostí akcií a stavov v systéme.</correct>;Stavový diagram je sémanticky ekvivalentný so sekvenčným diagramom.;Uzly v diagrame predstavujú stavy a hrany reprezentujú tok údajov.;",stredne,questions/psi-op-q-004ok.xml,
504,,Použitie diagramov prípadov použitia,funkcionalne_modely,y,Použitie diagramov prípadov použitia:,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Modelovanie požiadaviek na systém;Modelovanie kontextu systému;Komunikácia s používateľom;,<correct>Modelovanie požiadaviek na systém</correct>;Modelovanie vzťahu používateľov systému k údajom v tomto systéme;Modelovanie postupnosti vytvárania projektu;<correct>Modelovanie kontextu systému</correct>;Modelovanie priorít projektu;Modelovanie základnej architektúry systému;<correct>Komunikácia s používateľom</correct>;,lahke,questions/psi-op-q-004pl.xml,
505,,Zapuzdrenie,strukturne_modely,,Zapuzdrenie NIE je:,"UML, štruktúrny diagram, diagram tried, modelovanie",04 Základy modelovania softvéru,,multi-choice,mechanizmus zdielania vlastností a správania;zovšeobecnie;schopnosť ukryť rôzne implementácie;abstrakcia;,"<correct>mechanizmus zdielania vlastností a správania</correct>;skrytie všetkých podrobností, ktoré neprispievajú k jeho základnej charakteristike;<correct>zovšeobecnie</correct>;<correct>schopnosť ukryť rôzne implementácie</correct>;<correct>abstrakcia</correct>;",lahke,questions/psi-op-q-005mk.xml,
506,,Modely správania,modely_spravania,y,Medzi modely správania nepatrí:,"UML, model správania, modelovanie",09 Modely správania,09.00 [Main],single-choice,Diagram tried.;,Sekvenčný diagram.;Komunikačný diagram.;Stavový diagram.;<correct>Diagram tried.</correct>;,lahke,questions/psi-op-q-005ok.xml,
507,,Čo platí o diagrame činností,modely_spravania,y,Označ pravdivé tvrdenia o diagrame činností:,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,multi-choice,Názvy entít sú slovesá;Diagram musí mať začiatočný bod;Často sa napájajú na diagramy prípadov použitia;,"Názvy entít sú podstatné mená;<correct>Názvy entít sú slovesá</correct>;Diagram musí mať koncový bod;<correct>Diagram musí mať začiatočný bod</correct>;Nápisy výstupných hrán z rozhodovacieho bloku majú tvar ""udalosť [podmienka] / akcia"";<correct>Často sa napájajú na diagramy prípadov použitia</correct>;Do jednej entity nemôže smerovať viac ako jedna cesta bez použitia branch.;",lahke,questions/psi-op-q-005pl.xml,
508,,Ukrytie rôznych implementácií,strukturne_modely,,Schopnosť ukryť rôzne implementácie je:,"UML, štruktúrny diagram, diagram tried, modelovanie",04 Základy modelovania softvéru,,single-choice,Viactvarosť;,Dedičnosť;<correct>Viactvarosť</correct>;Zapuzdrenie;,trivialne,questions/psi-op-q-006mk.xml,
509,,Prechody medzi stavmi v stavovovom diagrame,modely_spravania,y,"Vyber, ako sú vo všeobecnosti označené hrany, ktoré reprezentujú prechody medzi stavmi:","UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,single-choice,udalosť [podmienka] / akcia.;,udalosť / akcia (kardinalita).;<correct>udalosť [podmienka] / akcia.</correct>;akcia / podmienka.;pôvodný stav / nový stav.;udalosť <<podmienka>>.;,lahke,questions/psi-op-q-006ok.xml,
510,resources/q-001pl.png,Hrany v diagrame prípadov použitia,funkcionalne_modely,y,"Akého typu by správne mali byť hrany, ktoré sú znázornené čiarkovane?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,extend;,asociácia;<correct>extend</correct>;uses;dedenie;use;include;,lahke,questions/psi-op-q-006pl.xml,
511,resources/q-001mk.png,Väzby v diagrame tried,strukturne_modely,y,Doplňte najvhodnejšie väzby do obrázku:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,v izbe sú zoskupené postele;s izbou môže byť asociovaných viacero skríň;Tv izbe sú zoskupené skrine;,<correct>v izbe sú zoskupené postele</correct>;v posteli sú zoskupené skrine;so skriňou je asociovaných viacero izieb;<correct>s izbou môže byť asociovaných viacero skríň</correct>;skriňa je kompozíciou postelí;izba zovšeobecňuje skriňu;izba je závislá na posteli;<correct>Tv izbe sú zoskupené skrine</correct>;,stredne,questions/psi-op-q-007mk.xml,
512,resources/q-001ok.png,Pomenovanie stavu,modely_spravania,y,"Na obrázku je zobrazený stav stavového automatu a spolu s ním aj súvisiace prechody. Daný stav však nie je pomenovaný. Vyberte z možností tie, ktoré by mohli tvoriť jeho názov:","UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,multi-choice,Čakanie na zadanie PIN kódu.;Zadávanie PIN kódu.;,Načítavanie SIM karty.;Zadaj PIN kód.;Zadávanie PUK kódu.;<correct>Čakanie na zadanie PIN kódu.</correct>;<correct>Zadávanie PIN kódu.</correct>;,lahke,questions/psi-op-q-007ok.xml,
513,resources/q-001pl.png,Pomenovanie hráča v diagrame prípadov použitia,funkcionalne_modely,,"Je správne pomenovanie hráča ""Mobilná sieť""?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,áno;,"nie, hráči môžu byť len osoby;áno, ale nemalo by sa to často vyskytovať;nie;<correct>áno</correct>;nie, hráči môžu byť len osoby alebo firmy;",lahke,questions/psi-op-q-007pl.xml,
514,resources/q-002mk.png,"Väzba medzi triedami ""Button"" a ""Frame""",strukturne_modely,y,Doplňte najvhodnejšiu väzbu do obrázku:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,frame obsahuje kompozíciu buttonov;,frame zovšeobecnuje button;button zovšeobecnuje frame;frame realizuje button;frame zoskupuje buttony;frame je závislý na buttone;<correct>frame obsahuje kompozíciu buttonov</correct>;,stredne,questions/psi-op-q-008mk.xml,
515,,Čo platí o diagrame komunikácií,modely_spravania,y,"Vyber tvrdenia, ktoré platia o diagrame komunikácií:","UML, diagram komunikácie, model správania, modelovanie",09 Modely správania,09.02 Diagram komunikácie,multi-choice,Modeluje správanie pomocou interakcií medzi objektmi a ich aktuálnych vzťahov.;Čas nie je samostatná dimenzia znázornená v grafe.;Poradie správ sa vyjadruje ich číslovaním.;,"<correct>Modeluje správanie pomocou interakcií medzi objektmi a ich aktuálnych vzťahov.</correct>;<correct>Čas nie je samostatná dimenzia znázornená v grafe.</correct>;Je sémanticky ekvivalentný so stavovým diagramom.;Je sémanticky ekvivalentný so sekvenčným diagramom, ale neobsahuje vzťahy medzi objektmi.;Čas je samostatná veličina, správy sú uvedené v časovej postupnosti.;<correct>Poradie správ sa vyjadruje ich číslovaním.</correct>;",stredne,questions/psi-op-q-008ok.xml,
516,resources/q-002pl.png,Diagram prípadov použitia pre odvádzanie daní,funkcionalne_modely,,"Aký je vhodný názov hráča, aby vyjadroval pravidelné neomylné odvádzanie dane z každej platby?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,čas;,daňový poplatník;zákazník;<correct>čas</correct>;podnikateľ;volič;,lahke,questions/psi-op-q-008pl.xml,
517,resources/q-003mk.png,Väzby v diagrame tried osôb,strukturne_modely,y,Doplňte najvhodnejšie väzby do obrázku:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,osoba zovšeobecňuje zákazníka;osoba zovšeobecňuje zamestnanca;,zákazník zoskupuje osoby;osoba je kompozíciou zákazníkov;zamestnanec realizuje osobu;<correct>osoba zovšeobecňuje zákazníka</correct>;zákazník realizuje osobu;<correct>osoba zovšeobecňuje zamestnanca</correct>;,lahke,questions/psi-op-q-009mk.xml,
518,,Model životného cyklu dátovej entity,modely_spravania,y,Graf životného cyklu dátovej entity:,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,single-choice,"opisuje časovú následnosť jednotlivých funkcií, ktoré pracujú s dátovou entitou.;","je prostriedok na vyjadrenie kauzálnych a časových súvislosti (následnosti) akcií a stavov v systéme.;znázorňuje dátové entity a vzťahy medzi nimi.;<correct>opisuje časovú následnosť jednotlivých funkcií, ktoré pracujú s dátovou entitou.</correct>;modeluje dynamické správanie pomocou interakcií medzi objektmi a ich aktuálnych vzťahov;",stredne,questions/psi-op-q-009ok.xml,
519,resources/q-003pl.png,Diagram prípadov použitia pre online objednávku,funkcionalne_modely,y,Doplňte chýbajúci názov prípadu použitia?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,získať pomoc;,pomôž mi;<correct>získať pomoc</correct>;pomoc;získam pomoc;zavolaj;,lahke,questions/psi-op-q-009pl.xml,
520,resources/q-004mk.png,Väzby v diagrame tried fotoaparátov,strukturne_modely,y,Doplňte najvhodnejšie väzby do obrázku:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,CannonEOS500D realizuje fotoaparát;CannonPowerShotA3100IS realizuje fotoaparát;,<correct>CannonEOS500D realizuje fotoaparát</correct>;fotoaparát zoskupuje CannonEOS500D;CannonPowerShotA3100IS závisí od fotoaparátu;fotoaparát zovšeobecňuje CannonPowerShotA3100IS;<correct>CannonPowerShotA3100IS realizuje fotoaparát</correct>;fotoaparát zovšeobecňuje CannonEOS500D;,stredne,questions/psi-op-q-010mk.xml,
521,,Začiatočný a koncový stav,modely_spravania,,Systém môže mať:,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,single-choice,"iba jeden začiatočný stav, ale viac rôznych koncových stavov.;","viac rôznych začiatočných aj koncových stavov.;iba jeden koncový stav, ale viac rôznych začiatočných stavov.;iba jeden začiatočný stav a iba jeden koncový stav.;<correct>iba jeden začiatočný stav, ale viac rôznych koncových stavov.</correct>;",lahke,questions/psi-op-q-010ok.xml,
522,resources/q-004pl.png,"Vzťah medzi hráčmi ""Sprievodca"" a ""Pasažier""",funkcionalne_modely,y,"Aký má byť správne vzťah medzi hráčmi ""Sprievodca"" a ""Pasažier""?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,Sprievodca dedí od Pasažiera;,"Pasažier dedí od Sprievodcu;nemá byť medzi nimi žiaden vzťah;má tam byť asociácia;má tab byť vzťah ""include"";<correct>Sprievodca dedí od Pasažiera</correct>;",stredne,questions/psi-op-q-010pl.xml,
523,resources/q-005mk.png,Názov dátovej entity,strukturne_modely,y,Doplňte najvhodnejší názov dátovej entity:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,Titul;,Knihy;Skripta;Zbierka;Kuchárka;<correct>Titul</correct>;Kuchárska kniha;,lahke,questions/psi-op-q-011mk.xml,
524,resources/q-005pl.png,Diagram prípadov použitia pre check-in v hoteli,funkcionalne_modely,y,"Aký má byť vzťah medzi prípadmi použitia ""Individuálny Check-in"" a ""Postaranie sa o batožinu"", ""Check-in cez počítač"" a ""Individuálny Check-in"", ""Postaranie sa o batožinu"" a ""Check-in cez Kiosk"" (smer vzťahov je vzhľadom na poradie v tomto vymenovaní)?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,"žiaden, dedenie, extend;","žiaden, dedenie, include;include, žiaden, extend;include, extend, opačný extend;extend, dedenie, žiaden;<correct>žiaden, dedenie, extend</correct>;dedenie, extend, dedenie;žiaden, opačné dedenie, extend;",stredne,questions/psi-op-q-011pl.xml,
525,resources/q-006mk.png,"Názov metódy v triede ""Študent""",strukturne_modely,,"Doplňte najvhodnejší názov pre metódu na zistenie, či študent môže študovať daný predmet(napr. či má spravené všetky predmety, ktoré je potrebné absolvovať na štúdium zvoleného predmetu):","UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,jeOpravneny(Predmet: p);,vyhovuje(Predmet: p);splna(Predmet: p);jeVhodny(Predmet: p);jeSpraveny(Predmet: p);<correct>jeOpravneny(Predmet: p)</correct>;ma(Predmet: p);,lahke,questions/psi-op-q-012mk.xml,
526,resources/q-006pl.png,Diagram prípadov použitia pre eshop,funkcionalne_modely,y,"Aký má byť vzťah medzi prípadom použitia ""Prezerať položky"" a ostatnými prípadmi použitia?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,"extend, smerom k ""Prezerať položky"";","include, smerom k ""Prezerať položky"";include, smerom od ""Prezerať položky"";<correct>extend, smerom k ""Prezerať položky""</correct>;extend, smerom od ""Prezerať položky"";uses, smerom k ""Prezerať položky"";uses, smerom od ""Prezerať položky"";majú tam byť asociácie;",lahke,questions/psi-op-q-012pl.xml,
527,resources/q-006pl.png,"""Autentifikácia používateľa"" v eshope",funkcionalne_modely,,"Aké majú byť vzťahy medzi prípadmi použitia ""Autentifikácia používateľa"" a ostatnými prípadmi použitia(v smere zhora dole)?","UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,"include, extend, include;","extend, include, include;extend, include, extend;extend, extend, extend;<correct>include, extend, include</correct>;include, žiaden, include;include, include, include;",stredne,questions/psi-op-q-013pl.xml,
528,resources/q-008mk.png,Kardinalita väzby v diagrame tried,strukturne_modely,,Dátové entity na obrázku môžeme prepojiť väzbou s kardinalitou:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,1:1;,1:N;<correct>1:1</correct>;M:N;,lahke,questions/psi-op-q-014mk.xml,
529,resources/q-007pl.png,Diagram prípadov použitia vodiča auta,funkcionalne_modely,,Čo je na obrázku nesprávne?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,"Názov prípadu použitia ""Do nemocnice"";Názov prípadu použitia ""Brzda"";Vzťah extend medzi ""Riadiť auto"" a ""Odbočiť"";Názov prípadu použitia ""Plyn"";Názov prípadu použitia ""Vpravo"";","Názov hráča;<correct>Názov prípadu použitia ""Do nemocnice""</correct>;Názov prípadu použitia ""Odbočiť"";<correct>Názov prípadu použitia ""Brzda""</correct>;<correct>Vzťah extend medzi ""Riadiť auto"" a ""Odbočiť""</correct>;Názov prípadu použitia ""Riadiť auto"";<correct>Názov prípadu použitia ""Plyn""</correct>;<correct>Názov prípadu použitia ""Vpravo""</correct>;Vzťah include medzi ""Riadiť auto"" a ""Plyn"";Vzťah extend medzi ""Do nemocnice"" a ""Riadiť auto"";",stredne,questions/psi-op-q-014pl.xml,
530,resources/q-009mk.png,Kardinalita väzby medzi matkou a dieťaťom,strukturne_modely,y,Na matrike sú zapísané deti a ich rodičia. Vzťah medzi biologickou matkou a dieťaťom môžeme naznačiť väzbou s kardinalitou:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,1:1..*;,0..*:1;1:0..*;<correct>1:1..*</correct>;1..*:1..*;1:1;1..*:1;,lahke,questions/psi-op-q-015mk.xml,
531,resources/q-008pl.png,Názov hráča v diagrame prípadov použitia,funkcionalne_modely,y,Aký je vhodný názov pre hráča v uvedenom diagrame?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,Autentifikácia;,Administrátor;Používateľ;<correct>Autentifikácia</correct>;Server;Session;,lahke,questions/psi-op-q-015pl.xml,
532,resources/q-010mk.png,Kardinalita väzby medzi študentom a univerzitou,strukturne_modely,,Dátovú entitu študenta (opisujúcej študujúceho študenta) a univerzity môžeme definovať väzbou s kardinalitou:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,1..*:1..*;,0..*:1;1:0..*;1:1..*;<correct>1..*:1..*</correct>;0..*:0..*;1:1;1..*:1;1..*:0..*;,lahke,questions/psi-op-q-016mk.xml,
533,,Vzťah extend v diagrame prípadov použitia,funkcionalne_modely,y,Čo platí o vzťahu extend (rozšírenie)v diagrame prípadov použitia?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,"Prípad použitia, ktorý rozširuje iný prípad použitia, sa vykoná len v špeciálnych prípadoch.;Vzťah sa používa len medzi prípadmi použitia;","Prípad použitia, ktorý rozširuje iný prípad použitia, sa vykoná vždy keď sa vykoná aj ten pôvodný.;Vzťah sa používa aj medzi aktérmi aj medzi prípadmi použitia.;<correct>Prípad použitia, ktorý rozširuje iný prípad použitia, sa vykoná len v špeciálnych prípadoch.</correct>;Vzťah sa používa len medzi aktérmi.;<correct>Vzťah sa používa len medzi prípadmi použitia</correct>;",stredne,questions/psi-op-q-016pl.xml,
534,resources/q-011mk.png,Chyby v diagrame tried elektrických spotrebičou,strukturne_modely,,Nájdite chyby v diagrame na obrázku:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,trieda ElektrickySpotrebic má byť interface;kardinalita vzťahu medzi triedou Lampa a Ziarovka je naopak;vzťah medzi triedou Vysavac a Vrecko má byť zoskupenie;vzťah medzi triedou Vysavac a Filter má byť zoskupenie a šípka má byť naopak;názvy tried majú začínať veľkým písmenom;,trieda ElektrickySpotrebic má byť abstraktná;<correct>trieda ElektrickySpotrebic má byť interface</correct>;trieda Lampa má byť abstraktná;vzťah medzi triedou Lampa a Ziarovka je naopak;<correct>kardinalita vzťahu medzi triedou Lampa a Ziarovka je naopak</correct>;vzťah medzi triedou Vysavac a Lampa má byť kompozícia;vzťah medzi triedou Vysavac a Vrecko je naopak;kardinalita vzťahu medzi triedou Vysavac a Vrecko je naopak;<correct>vzťah medzi triedou Vysavac a Vrecko má byť zoskupenie</correct>;vzťah medzi triedou Vysavac a Filter má byť zoskupenie;vzťah medzi triedou Vysavac a Filter má byť kompozicia a šípka má byť naopak;<correct>vzťah medzi triedou Vysavac a Filter má byť zoskupenie a šípka má byť naopak</correct>;vzťah medzi triedou Vysavac a Filter má byť kompozicia;názvy tried majú byť s malými písmenami;<correct>názvy tried majú začínať veľkým písmenom</correct>;,tazke,questions/psi-op-q-017mk.xml,
535,,Čo riadia prípady použitia,funkcionalne_modely,y,Čo riadia prípady použitia?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",,,multi-choice,Zbieranie požiadaviek;Testovanie;Vývoj architektúry;Plánovanie interácií vo vývoji softvéru;,<correct>Zbieranie požiadaviek</correct>;Implementáciu;<correct>Testovanie</correct>;Možné riziká počas vývoja;<correct>Vývoj architektúry</correct>;<correct>Plánovanie interácií vo vývoji softvéru</correct>;,stredne,questions/psi-op-q-017pl.xml,
536,,Názvy prípadov použitia,funkcionalne_modely,y,Ktoré sú vhodné názvy pre prípady použitia?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Registrácia študenta;Doručenie pošty;Použitie kalendára;Nájdenie produktu;,<correct>Registrácia študenta</correct>;Kalendár;<correct>Doručenie pošty</correct>;Reklámacia;<correct>Použitie kalendára</correct>;<correct>Nájdenie produktu</correct>;,lahke,questions/psi-op-q-018pl.xml,
537,resources/q-013mk.png,Vzťah medzi predmetmi v diagrame objektov,strukturne_modely,y,Vzťah medzi uvedenými predmetmi najlepšie vystihuje:,"UML, štruktúrny diagram, diagram objektov, modelovanie",08 Štruktúrne modely,08.02 Diagram objektov,single-choice,Závislosť (šípka smeruje od BakalarskehyProjektI k BakalarskyProjektII);,Kompozícia (šípka smeruje od BakalarskehyProjektI k BakalarskyProjektII);Kompozícia (šípka smeruje od BakalarskehyProjektII k BakalarskyProjektI);<correct>Závislosť (šípka smeruje od BakalarskehyProjektI k BakalarskyProjektII)</correct>;Závislosť (šípka smeruje od BakalarskehyProjektII k BakalarskyProjektI);Zovšeobecnenie (šípka smeruje od BakalarskehyProjektI k BakalarskyProjektII);Zovšeobecnenie (šípka smeruje od BakalarskehyProjektII k BakalarskyProjektI);Zoskupenie (šípka smeruje od BakalarskehyProjektI k BakalarskyProjektII);Zoskupenie (šípka smeruje od BakalarskehyProjektII k BakalarskyProjektI);,stredne,questions/psi-op-q-019mk.xml,
538,resources/q-003ok_a.png,Vhodný názov pre správu,modely_spravania,,Vyber vhodný názov pre posielanú správu:,"UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,zabiDraka;hľadaj Svätý grál;,<correct>zabiDraka</correct>;kôň;<correct>hľadaj Svätý grál</correct>;pasovaný na rytiera;čakanie na družinu;,lahke,questions/psi-op-q-019ok.xml,
539,,Povolené vzťahy v diagrame prípadov použitia,funkcionalne_modely,y,Aké sú povolené vzťahy v diagrame prípadov použitia?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Asociácia medzi hráčom a prípadom použitia;Asociácia medzi dvomi prípadmi použitia;Generalizácia medzi dvomi prípadmi použitia;Generalizácia medzi dvoma hráčmi;,<correct>Asociácia medzi hráčom a prípadom použitia</correct>;Asociácia medzi dvoma hráčmi;<correct>Asociácia medzi dvomi prípadmi použitia</correct>;Generalizácia medzi hráčom a prípadom použitia;<correct>Generalizácia medzi dvomi prípadmi použitia</correct>;<correct>Generalizácia medzi dvoma hráčmi</correct>;,lahke,questions/psi-op-q-019pl.xml,
540,resources/q-014mk.png,Nájdite chyby v diagrame modelu údajov,strukturne_modely,,"Nájdite chyby v diagrame na obrázku (Pre prípad, že predmet vyučuje vždy len jeden vyučujúci):","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,vzťah medzi entitou Vyucujuci a Predmet je naopak;pri entite Predmet ma byt kardinalita 1 až N;identifikujúca činnosť má byť pri kardinalite N;,chýbajú zátvorky pre stereotyp ;<correct>vzťah medzi entitou Vyucujuci a Predmet je naopak</correct>;pri entite Vyucujuci ma byt kardinalita 0 až 1;pri entite Vyucujuci ma byt kardinalita 1 až 1;pri entite Vyucujuci ma byt kardinalita 1 až N;pri entite Predmet ma byt kardinalita 0 až 1;pri entite Predmet ma byt kardinalita 1 až 1;<correct>pri entite Predmet ma byt kardinalita 1 až N</correct>;<correct>identifikujúca činnosť má byť pri kardinalite N</correct>;cudzí kľúč mú byť v entite Vyucujuci;primárny kľúč je v entite Predmet zbytočný;,stredne,questions/psi-op-q-020mk.xml,
541,resources/q-003ok.png,Čo platí o sekvenčnom diagrame zabitia draka,modely_spravania,y,"Vyber, čo platí o diagrame na obrázku:","UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,Správu findDragon() posiela objekt k sám sebe.;,"Diagram nepatrí medzi interakčné diagramy.;<correct>Správu findDragon() posiela objekt k sám sebe.</correct>;Diagram na obrázku je ekvivalentný s diagramom komunikácií, okrem väzieb medzi objektmi, ktoré druhý menovaný nemá.;Správa killDragon() je volaním, ktoré vytvorí objekt k.;Správa die() je návratovým volaním objektu d.;Iba jednému objektu nie je poslaný signál na zničenie.;",stredne,questions/psi-op-q-020ok.xml,
542,,Vzťahy v diagrame prípadov použitia,funkcionalne_modely,y,Ktoré vzťahy sa v diagrame prípadov použitia nepoužívajú?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Use;Includes;Uses;Extends;,<correct>Use</correct>;Extend;<correct>Includes</correct>;Generalizácia;<correct>Uses</correct>;<correct>Extends</correct>;Include;,lahke,questions/psi-op-q-020pl.xml,
543,resources/q-015mk.png,Chyby v modeli údajov filmov,strukturne_modely,,"Nájdite chyby v diagrame na obrázku (Pre prípad, že uvažujeme celú kariéru herca a aj dokumentárne filmy, seriály a TV programy):","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,vzťah medzi entitou Herec a Rola je naopak;chýba cudzí kľúč herecID vo väzobnej dátovej entite Rola;,chýbajú zátvorky pre stereotyp ;vzťah medzi entitou Film a Rola je naopak;<correct>vzťah medzi entitou Herec a Rola je naopak</correct>;vo väzobnej dátovej entite musí byť primárny kľúč;vo filme musí vystupovať nejaká postava;herec musí vystupovať v aspoň jednom filme;väzobná entita je zbytočná;identifikujúca činnosť má byť bližšie pri kardinalite 1;<correct>chýba cudzí kľúč herecID vo väzobnej dátovej entite Rola</correct>;chýba cudzí kľúč rolaID v entite Herec;primárny kľúč je v entite Herec zbytočný;,tazke,questions/psi-op-q-021mk.xml,
544,resources/q-006ok.png,Diagram komunikácií výťahu,modely_spravania,y,"Vyber, čo platí o diagrame na obrázku:","UML, diagram komunikácie, model správania, modelovanie",09 Modely správania,09.02 Diagram komunikácie,multi-choice,"Diagram na obrázku patrí medzi interakčné diagramy.;Keď dostane ovládanie výťahu signalizované, aká je požiadavka pasažiera, ako prvú vec dá okyn na rozsvietenie tlačidla.;Väzby medzi objektmi v diagrame nepodávajú žiadnu dodatočnú informáciu, o aký typ väzby ide.;","<correct>Diagram na obrázku patrí medzi interakčné diagramy.</correct>;Stavový diagram na obrázku je sémanticky ekvivalentný so sekvenčným diagramom.;Z diagramu vieme presne zistiť, medzi ktorými objektmi existujú väzby a akého typu.;<correct>Keď dostane ovládanie výťahu signalizované, aká je požiadavka pasažiera, ako prvú vec dá pokyn na rozsvietenie tlačidla.</correct>;<correct>Väzby medzi objektmi v diagrame nepodávajú žiadnu dodatočnú informáciu, o aký typ väzby ide.</correct>;",stredne,questions/psi-op-q-021ok.xml,
545,,Použitie diagramu činností,funkcionalne_modely,y,Na čo sa používa diagram činností?,"UML, diagram činností, funkcionálny model, modelovanie",,,multi-choice,Modelovanie tokov práce;Modelovanie operácií;,<correct>Modelovanie tokov práce</correct>;Modelovanie prechodov jedného objektu;<correct>Modelovanie operácií</correct>;Modelovanie činností programátorov;Modelovanie aktivít používateľov;,lahke,questions/psi-op-q-021pl.xml,
546,resources/q-016mk.png,Chyby v modeli údajov evidencie fotoaparátov,strukturne_modely,,Pre evidenciu rôznych typov fotoaparátov a ich fotiek bol navrhnutý logický model uvedený na obrázku. Nájdite chyby v logickom modely:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,vzťah medzi entitou Fotoaparat a Fotka je naopak;v entite Fotoaparat chýba primárny kľúč;v entite Fotka chýba primárny kľúč;,<correct>vzťah medzi entitou Fotoaparat a Fotka je naopak</correct>;vzťah medzi entitou Fotoaparat a Fotka má byť N:M;chýbajú zátvorky pre stereotyp ;<correct>v entite Fotoaparat chýba primárny kľúč</correct>;v entite Fotoaparat chýba cudzí kľúč entity Fotka;chýbajú údajové typy pre jednotlivé atribúty;<correct>v entite Fotka chýba primárny kľúč</correct>;v entite Fotka chýba cudzí kľúč entity Fotoaparat;identifikujúca činnosť má byť bližšie pri kardinalite 1;identifikujúca činnosť má byť v strede väzby;,stredne,questions/psi-op-q-022mk.xml,
547,resources/q-007ok.png,Čo platí pre sekvenčný diagram InputStreamov,modely_spravania,y,"Vyber, čo platí o diagrame na obrázku:","UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,"Volanie readInt() vracia načítanú hodnotu int.;Volaním fill() objekt b volá sám seba.;Prerušovanou čiarou sú označené návratové volania.;Výsledkom zobrazeného procesu je prečítaná hodnotu typu int zo súboru.;Cyklus, v rámci ktorého sa opakovane volá read(buffer, pos, len), beží 1 až n-krát.;Volanie read() vracia načítanú hodnotu byte.;Správa new(f) je volaním, ktoré vytvorí nový objekt b.;","<correct>Volanie readInt() vracia načítanú hodnotu int.</correct>;Správa new(b) je volaním, ktoré vytvorí nový objekt - objekt b.;<correct>Volaním fill() objekt b volá sám seba.</correct>;Cyklus, v rámci ktorého sa opakovane volá read(buffer, pos, len), beží maximálne štyrikrát.;<correct>Prerušovanou čiarou sú označené návratové volania.</correct>;Volaním read() objekt b volá sám seba.;<correct>Výsledkom zobrazeného procesu je prečítaná hodnotu typu int zo súboru.</correct>;Volanie read() vracia načítanú hodnotu int.;<correct>Cyklus, v rámci ktorého sa opakovane volá read(buffer, pos, len), beží 1 až n-krát.</correct>;<correct>Volanie read() vracia načítanú hodnotu byte.</correct>;<correct>Správa new(f) je volaním, ktoré vytvorí nový objekt b.</correct>;",tazke,questions/psi-op-q-022ok.xml,
548,resources/q-009pl.png,Podmienka v diagrame činností varenia kávy,funkcionalne_modely,,Aká podmienka chýba?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,Káva nájdená;,Káva došla;Vybrali sme kávu;Je iba čierna káva;Máme kávu;<correct>Káva nájdená</correct>;Je pokazený automat;,lahke,questions/psi-op-q-022pl.xml,
549,resources/q-017mk.png,Fyzický model údajov výstav galérií,strukturne_modely,,Pre evidenciu medzinárodných výstav v galérii rôznych svetových umelcov bol navrhnutý fyzický model uvedený na obrázku. Nájdite chyby vo fyzickom modely:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,v entite Umelec chýba údajový typ pre primárny kľúč;pre entitu telefon_kontakt a fax_kontakt je lepšie použiť VARCHAR;cudzie kľúče nemajú údajový typ;,vzťah medzi entitou Umelec a Vystava je naopak;vzťah medzi entitou Galeria a Vystava je naopak;entita výstava je zbytočná;chýbajú zátvorky pre stereotyp ;<correct>v entite Umelec chýba údajový typ pre primárny kľúč</correct>;pre entity telefon_kontakt a fax_kontakt je lepšie použiť INTEGER;<correct>pre entitu telefon_kontakt a fax_kontakt je lepšie použiť VARCHAR</correct>;údajové typy pre jednotlivé atribúty namajú byť vo fyzickom modely;<correct>cudzie kľúče nemajú údajový typ</correct>;vo fyzickom modely sa nesmie zobrazovať príznak Nullable;,tazke,questions/psi-op-q-023mk.xml,
550,resources/q-005ok.png,Stavový diagram bankomatu,funkcionalne_modely,,"Vyber, čo platí o diagrame na obrázku:","UML, stavový diagram, model správania, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,multi-choice,"Ošetrenie zadávania PIN kódu nie je dobre riešené, chýba úprava počítadla pokusov v prípade nesprávneho PIN kódu.;Vysúvanie karty sa deje vždy, bez ohľadu na to, či je výber úspešný, príde k chybe alebo používateľ zvolí zrušenie. Jedinou výnimkou je zadržanie karty v dôsledku príliš veľa nesprávnych pokusov.;","<correct>Ošetrenie zadávania PIN kódu nie je dobre riešené, chýba úprava počítadla pokusov v prípade nesprávneho PIN kódu.</correct>;Diagram zobrazuje interakcie, ku ktorým prichádza v rámci procesu výberu peňazí z bankomatu.;Vysúvanie karty sa deje vždy, bez ohľadu na to, či je výber úspešný, príde k chybe alebo používateľ zvolí zrušenie.;V prípade, že používateľ zvolí zrušenie vo fáze, kedy vyberá sumu, bankomat prejde do stavu Vysuvanie karty.;Funkcionálny model na obrázku zachytáva výber peňazí z bankomatu.;Začiatok životného cyklu iniciuje podmienka Vlozena karta.;Stavový diagram na obrázku patrí medzi interakčné modely.;V prípad, že kartu nemožno načítať, bude táto zadržaná.;<correct>Vysúvanie karty sa deje vždy, bez ohľadu na to, či je výber úspešný, príde k chybe alebo používateľ zvolí zrušenie. Jedinou výnimkou je zadržanie karty v dôsledku príliš veľa nesprávnych pokusov.</correct>;Diagram je nesprávny, pretože umožňuje výber sumy aj keď kartu neolo možné načítať.;",tazke,questions/psi-op-q-023ok.xml,
551,,Swimlanes - Diagram činností,funkcionalne_modely,y,Čo sú to swimlanes v diagrame činností?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,Predstavujú hráčov;,Rovné čiary;Rovnaké rozostupy medzi jednotlivými činnostami v diagrame;To je len v plávaní;<correct>Predstavujú hráčov</correct>;Určujú hranice diagramu;,lahke,questions/psi-op-q-023pl.xml,
552,resources/q-018mk.png,Diagram tried kvetov,strukturne_modely,y,"Na obrázku je model opisujúci širšiu skupinu kvetín. Tento model je potrebné upraviť pre evidenciu tulipánov už v rozkvitnutom stave. Tulipán je trvalá cibulovitá kvetina, ktorá ma listy jednoduché, podlhovasté s pozdĺžnou žilnatinou. Kvet je pomerne veľký na vrchole stonky. Okvetie je zložené z 6 okvetných lístkov a plodom je tobolka. Aby model lepšie opisoval tulipán je potrebné urobiť nasledovné zmeny:","UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,kardinalitu väzby medzi entitou Koren a Stonka je potrebné zmeniť na 1:1;kardinalitu väzby medzi entitou Stonka a List je potrebné zmeniť na 1:1..*;kardinalitu väzby medzi entitou Stonka a Kvet je potrebné zmeniť na 1:1;,v modely je potrebné zmeniť kompozíciu za zoskupenie;šípky väzieb majú byť naopak;<correct>kardinalitu väzby medzi entitou Koren a Stonka je potrebné zmeniť na 1:1</correct>;kardinalitu väzby medzi entitou Koren a Stonka je potrebné zmeniť na 1:0..1;kardinalitu väzby medzi entitou Stonka a List je potrebné zmeniť na 1:1;<correct>kardinalitu väzby medzi entitou Stonka a List je potrebné zmeniť na 1:1..*</correct>;kardinalitu väzby medzi entitou Stonka a Kvet je potrebné zmeniť na 1:0..1;<correct>kardinalitu väzby medzi entitou Stonka a Kvet je potrebné zmeniť na 1:1</correct>;kardinalitu väzby medzi entitou Stonka a Kvet je potrebné zmeniť na 1:1..*;,tazke,questions/psi-op-q-024mk.xml,
553,,Typy správ sekvenčného diagramu,modely_spravania,y,Ktoré z nasledujúcich typov správ obsahuje sekvenčný diagram?,"UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,asynchronous call;reply;create;destroy;,<correct>asynchronous call</correct>;aggregation;<correct>reply</correct>;loop;<correct>create</correct>;<correct>destroy</correct>;,stredne,questions/psi-op-q-024ok.xml,
554,,Fork - Diagram činností,funkcionalne_modely,y,Na čo slúži Fork v diagrame činností?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,Umožnuje vytvorenie paralelných činností;,Rozdelenie činnosti na dve;Prepojenie dvoch rôznych tokov riadenia;<correct>Umožnuje vytvorenie paralelných činností</correct>;Rozdeľuje swimlanes;Na jedenie;,lahke,questions/psi-op-q-024pl.xml,
555,resources/q-019mk.png,Zovšeobecnenie v diagrame tried,strukturne_modely,y,Vyberte najlepšie zovšeobecnenie entít uvedených na obrázku pre evidenciu výsledkov v stávkovej kancelárii:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,SportovyZapas;,Sport;<correct>SportovyZapas</correct>;SportovePodujatie;SportovaDisciplina;,lahke,questions/psi-op-q-025mk.xml,
556,,Správne tvrdenia o sekvenčnom diagrame,modely_spravania,y,Ktoré z tvrdenie o sekvenčnom diagrame nie je správne?,"UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,"V diagrame sú zachytené jednotlivé objekty bez správ, ktoré si posielajú(pre popis správ je nutné použiť iný diagram).;","Základnými entitami sú objekt a správa.;V diagrame sú zachytené jednotlivé objekty bez väzieb, ktoré sú medzi nimi(pre znázornenie väzieb je nutné použiť iný diagram).;<correct>V diagrame sú zachytené jednotlivé objekty bez správ, ktoré si posielajú(pre popis správ je nutné použiť iný diagram).</correct>;Je sémanticky ekvivalentný s diagramami komunikácií, ale neobsahuje vzťahy medzi objektmi.;Čas je samostatná dimenzia znázornená v grafe.;Znázorňuje interakcie medzi objektami v časovej postupnosti.;",lahke,questions/psi-op-q-025ok.xml,
557,,Ukončenie toku v diagrame činností,funkcionalne_modely,y,Koľko ukončovacích uzlov sa môže nachádzať v diagrame činností?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,Ľubovoľný počet;,"Práve jeden;Ekvivalentný počet k počtu merge blokov;<correct>Ľubovoľný počet</correct>;Jeden hlavný a jeden vedľajší;Toľko, koľko je začiatočných uzlov;",lahke,questions/psi-op-q-025pl.xml,
558,resources/q-020mk.png,Úprava diagramu tried kruhu,strukturne_modely,y,"Potrebujeme vykresliť kruh, ktorý je definovný svojím stredom a polomerom. Pre vykreslenie je definovaná metóda paint(). Trieda Circle sa už viac nebude rozširovať. Navrhnutý model neumožňuje vykreslenie kruhu. Vyberte aké úpravy je potrebné spraviť z uvedených možností (Tak aby boli údaje čo najlepšie zapuzdrené):","UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,atribúty x a y majú mať modifikátor prístupu - protected;metódy getX() a getY() majú mať modifikátor prístupu - public;metódy getWidth() a getHeight() majú mať modifikátor prístupu - public;metóda paint() v triede Circle má mať modifikátor prístupu - public;,<correct>atribúty x a y majú mať modifikátor prístupu - protected</correct>;atribúty x a y majú mať modifikátor prístupu - public;atribúty x a y majú mať modifikátor prístupu - package;metódy getX() a getY() majú mať modifikátor prístupu - protected;<correct>metódy getX() a getY() majú mať modifikátor prístupu - public</correct>;metódy getX() a getY() majú mať modifikátor prístupu - package;<correct>metódy getWidth() a getHeight() majú mať modifikátor prístupu - public</correct>;metódy getWidth() a getHeight() majú mať modifikátor prístupu - private;metódy getWidth() a getHeight() majú mať modifikátor prístupu - package;metóda paint() v triede Shape nesmie byť abstraktná;<correct>metóda paint() v triede Circle má mať modifikátor prístupu - public</correct>;atribúty x a y majú mať modifikátor prístupu - package;atribút r má mať modifikátor prístupu - package;atribút r má mať modifikátor prístupu - protected;atribút r má mať modifikátor prístupu - public;,stredne,questions/psi-op-q-026mk.xml,
559,,Nevhodné prvky stavového diagramu ,modely_spravania,y,Ktoré z týhto prvkov nepatria do stavového diagramu?,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,multi-choice,trieda;činnosť;,<correct>trieda</correct>;udalosť;<correct>činnosť</correct>;stav;podmienka;,lahke,questions/psi-op-q-026ok.xml,
560,,Názvy aktivít,funkcionalne_modely,y,Aké sú vhodné názvy aktivít v diagrame činností?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,multi-choice,Overenie PINu;Odoslanie zásielky;Vyplnenie formulára;,Objednávka zákazníka;Zablokovaný PIN;<correct>Overenie PINu</correct>;Plán je akceptovaný;<correct>Odoslanie zásielky</correct>;<correct>Vyplnenie formulára</correct>;,lahke,questions/psi-op-q-026pl.xml,
561,resources/q-021mk.png,Normálna forma v modeli údajov evidencie fotoaparátov,strukturne_modely,,Vyberte pre entitu Fotoaparat v akej normálnej forme je:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,nie je v žiadnej z normálnych foriem;,<correct>nie je v žiadnej z normálnych foriem</correct>;je v prvej normálnej forme (1.NF);je v druhej normálnej forme (2.NF);je v tretej normálnej forme (3.NF);,tazke,questions/psi-op-q-027mk.xml,
562,,Vyber správne tvrdenie o stavovovom diagrame,modely_spravania,y,Stavový diagram:,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,single-choice,Môže obsahovať zložené stavy.;,<correct>Môže obsahovať zložené stavy.</correct>;Môže obsahovať najviac jeden zložený stav.;Môže obsahovať iba zložené stavy.;Nesmie obsahovať zložené stavy.;,lahke,questions/psi-op-q-027ok.xml,
563,,Black-hole aktivita,funkcionalne_modely,,"Čo je to ""Black-hole"" aktivita?","UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,"Aktivita, do ktorej idú hrany, ale žiadna nevychádza;","Aktivita, do ktorej ide hrana z Fork-u a hrana vychádza rovno do Join-u;Aktivita, do ktorej nejde žiadna hrana, ale nejaké vychádzajú;Aktivita, ktorá je hneď medzi začiatočným a koncovým uzlom;Aktivita, do ktorej ide hrana z rozhodovacieho bloku a hrana vychádza rovno do merge bloku;<correct>Aktivita, do ktorej idú hrany, ale žiadna nevychádza</correct>;Aktivita v ktorej končí celý tok;",lahke,questions/psi-op-q-027pl.xml,
564,resources/q-022mk.png,Nájdite chybu v diagrame tried stavebnice,strukturne_modely,,Pre opis stavebnice bol navrhnutý konceptuálny model. Nájdite chyby v modeli:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,"Trieda StavebnyBlok má byť abstraktná;Triedy ZakladnyBlok, SpajaciBlok a SpecialnyBlok majú byť abstraktné;Rekurzívna väzba na triede StavebnyBlok má byť zoskupenie;Rekurzívna väzba na triede StavebnyBlok má naopak popis väzby;Triedy MagnetickaTyc, Kocka, OcelovaGulicka a Koleso by mali dediť od nadtried svoju štruktúru;","Triedy Lego a Geomag majú byť kompozíciou triedy Stavebnica;<correct>Trieda StavebnyBlok má byť abstraktná</correct>;Trieda StavebnyBlok má byť rozhraním (interface);<correct>Triedy ZakladnyBlok, SpajaciBlok a SpecialnyBlok majú byť abstraktné</correct>;Triedy ZakladnyBlok, SpajaciBlok a SpecialnyBlok majú byť rozhraním (interface);Rekurzívna väzba na triede StavebnyBlok má byť naopak;<correct>Rekurzívna väzba na triede StavebnyBlok má byť zoskupenie</correct>;<correct>Rekurzívna väzba na triede StavebnyBlok má naopak popis väzby</correct>;<correct>Triedy MagnetickaTyc, Kocka, OcelovaGulicka a Koleso by mali dediť od nadtried svoju štruktúru</correct>;",stredne,questions/psi-op-q-028mk.xml,
565,,Nevhodné prvky diagramu komunikácií ,modely_spravania,,Ktoré z týchto prvkov nepatria do diagramu komunikácií?,"UML, diagram komunikácie, model správania, modelovanie",09 Modely správania,09.02 Diagram komunikácie,multi-choice,komponent;čas;,<correct>komponent</correct>;správa;<correct>čas</correct>;väzba;objekt;,stredne,questions/psi-op-q-028ok.xml,
566,,Miracle aktivita,funkcionalne_modely,,"Čo je to ""Miracle"" aktivita?","UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,"Aktivita, do ktorej nejde žiadna hrana, ale nejaké vychádzajú;","Aktivita, do ktorej ide hrana z Fork-u a hrana vychádza rovno do Join-u;<correct>Aktivita, do ktorej nejde žiadna hrana, ale nejaké vychádzajú</correct>;Aktivita, ktorá je hneď medzi začiatočným a koncovým uzlom;Aktivita, do ktorej ide hrana z rozhodovacieho bloku a hrana vychádza rovno do merge bloku;Aktivita, do ktorej idú hrany, ale žiadna nevychádza;Aktivita v ktorej začína celý tok;",stredne,questions/psi-op-q-028pl.xml,
567,resources/q-023mk.png,Nájdite chybu v diagrame tried fotoaparátov,strukturne_modely,,Nájdite chyby v navrhnutom modeli:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,"Závislosť medzi triedou RedisovePero a Atrament je naopak;Triedy OkruhlyHrot, UzkyHrot a SikmyHrot majú byť realizáciou rozhrania;Väzba medzi triedou RedisovePero a Rucka je naopak;Kardinalita väzby medzi triedou RedisovePero a rozhraním Hrot má byť 1:1 ;Väzba medzi triedou RedisovePero a rozhraním Hrot je naopak;","Závislosť medzi triedou RedisovePero a rozhraním Hrot je naopak;<correct>Závislosť medzi triedou RedisovePero a Atrament je naopak</correct>;<correct>Triedy OkruhlyHrot, UzkyHrot a SikmyHrot majú byť realizáciou rozhrania</correct>;Kardinalita väzby medzi triedou RedisovePero a Rucka má byť 1:*;Väzba medzi triedou RedisovePero a Rucka má byť zoskupenie;<correct>Väzba medzi triedou RedisovePero a Rucka je naopak</correct>;<correct>Kardinalita väzby medzi triedou RedisovePero a rozhraním Hrot má byť 1:1 </correct>;Väzba medzi triedou RedisovePero a rozhraním Hrot má byť kompozícia;<correct>Väzba medzi triedou RedisovePero a rozhraním Hrot je naopak</correct>;",tazke,questions/psi-op-q-029mk.xml,
568,resources/q-003ok.png,Čo platí o sekvenčnom diagrame zabitia draka,modely_spravania,y,"Vyber, čo platí o diagrame na obrázku:","UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,Čas je jedna dimenzia v grafe.;Na obrázku je jeden z inerakčných diagramov - sekvenčný.;Správa react(k) je poslaná skôr ako správa eat(k).;,"Čas beží zľava dopava.;<correct>Čas je jedna dimenzia v grafe.</correct>;Na obrázku je jeden z inerakčných diagramov - stavový.;Správa eat(k) je poslaná skôr ako správa react(k).;Poslaním správy react(k) objekt k volá sám seba.;Objekt k je inštancia triedy King.;<correct>Na obrázku je jeden z inerakčných diagramov - sekvenčný.</correct>;<correct>Správa react(k) je poslaná skôr ako správa eat(k).</correct>;Stavový diagram môže mať iba jeden začiatočný stav, ale viac koncových stavov.;",stredne,questions/psi-op-q-029ok.xml,
569,resources/q-010pl.png,Chyby v diagrame činností bankomatu,funkcionalne_modely,y,Čo je na diagrame zle?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,single-choice,Aktivita nemá výstupnú hranu;,Dve hrany smerujú do toho istého koncového uzla;Dva podmienkové bloky napojené na seba;Nie sú ošetrené všetky podmienky;<correct>Aktivita nemá výstupnú hranu</correct>;Používateľ si nemôže dobiť krediť;,lahke,questions/psi-op-q-029pl.xml,
570,resources/q-021mk.png,Typ modelu údajov,strukturne_modely,,Model na obrázku predstavuje:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,Logický model údajov;,Konceptuálny model údajov;<correct>Logický model údajov</correct>;Fyzický model údajov;,stredne,questions/psi-op-q-030mk.xml,
571,resources/q-007ok_a.png,Zvislá šípka v sekvenčnom diagrame,modely_spravania,y,Zvislá šípka vľavo na obrázku znázorňuje:,"UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,single-choice,čas;,"správu pre všetky objekty;správu, ktorú poslal objekt :Client sám sebe;<correct>čas</correct>;je to značka neukončenia procesu - značí, že tento pokračuje ďalej;",lahke,questions/psi-op-q-030ok.xml,
572,,Názvy Swimlanes,funkcionalne_modely,y,Vyber vhodné názvy pre Swimlanes?,"UML, diagram činností, funkcionálny model, modelovanie",07 Funkcionálne modely,07.02 Diagram aktivít,multi-choice,Banka;Obchodné oddelenie;Používateľ;,Session;<correct>Banka</correct>;Michael Phelps;<correct>Obchodné oddelenie</correct>;Potvrdenie;<correct>Používateľ</correct>;Overenie;,lahke,questions/psi-op-q-030pl.xml,
573,resources/q-003ok.png,Druh modelu správania,modely_spravania,y,Na obrázku je:,"UML, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,single-choice,Sekvenčný diagram;,Diagram komunikácií;<correct>Sekvenčný diagram</correct>;Diagram súčiastok;Diagram tokov údajov;,trivialne,questions/psi-op-q-031ok.xml,
574,,Vzťahy v diagramoch dátových tokov,funkcionalne_modely,,Aké vzťahy nie sú povolené v diagramoch dátových tokov?,"funkcionálny model, diagram tokov údajov, modelovanie",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,Externá entita - Externá entita;Úložisko údajov - Externá entita;Externá entita - Úložisko údajov;,Externá entita - Proces;<correct>Externá entita - Externá entita</correct>;<correct>Úložisko údajov - Externá entita</correct>;Proces - Úložisko údajov;Proces - Proces;<correct>Externá entita - Úložisko údajov</correct>;,stredne,questions/psi-op-q-031pl.xml,
575,,Entitno-relačný diagram,strukturne_modely,,"Vyberte fakty, ktoré sú pravdivé pre entitno-relačný diagram:","entitno-relačný diagram, štruktúrny diagram, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,"znázorňuje dátové entity a vzťahy medzi nimi;umožňuje definovať v diagrame aj atribúty vzťahov;neznázorňuje vznik, modifikáciu a zánik dátových entít a ani tok spracovania údajov;graf obsahujúci ako uzly dátové entity a vzťahy, hrany reprezentujú prepojenia medzi dátovými entitami a vzťahmi;zavedený v roku 1976 (Chen);","opisuje interakciu používateľa a modelovaného systému;<correct>znázorňuje dátové entity a vzťahy medzi nimi</correct>;systém sa chápe ako množina objektov a vzťahov medzi nimi, objekty komunikujú prostredníctvom správ;<correct>umožňuje definovať v diagrame aj atribúty vzťahov</correct>;zachytáva štruktúru tried, rozhraní a spoluprác spolu s ich vzájomnými vzťahmi;opisuje čo systém robí, uvažujú sa všetky spôsoby použitia systému;<correct>neznázorňuje vznik, modifikáciu a zánik dátových entít a ani tok spracovania údajov</correct>;graf obsahujúci ako uzly dátové entity a hrany reprezentujú vzťahy medzi dátovými entitami;<correct>graf obsahujúci ako uzly dátové entity a vzťahy, hrany reprezentujú prepojenia medzi dátovými entitami a vzťahmi</correct>;<correct>zavedený v roku 1976 (Chen)</correct>;",stredne,questions/psi-op-q-032mk.xml,
576,resources/q-002ok.png,Druh modelu správania,modely_spravania,,Na obrázku je:,"UML, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,single-choice,Stavový diagram;,Diagram činností;Sekvenčný diagram;Diagram tried;<correct>Stavový diagram</correct>;Diagram prípadov použitia;,trivialne,questions/psi-op-q-032ok.xml,
577,,Postupy pri tvorbe diagramov dátových tokov,funkcionalne_modely,,Aké sú postupy pri tvorbe diagramov dátových tokov?,"funkcionálny model, diagram tokov údajov, modelovanie",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,Zhora nadol → zdola nahor → zhora nadol;Zo stredu von;,Z najvyššej vrstvy na najnižšiu;Z logickej vrstvy na fyzickú;<correct>Zhora nadol → zdola nahor → zhora nadol</correct>;Interatívne a inkrementálne;<correct>Zo stredu von</correct>;,stredne,questions/psi-op-q-032pl.xml,
578,,Základ diagramu modelu údajov,strukturne_modely,,Diagram modelu údajov vychádza z:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,entitno-relačného diagramu;,diagramu tried;objektového diagramu;diagramu údajov;diagramu prípadov použitia;<correct>entitno-relačného diagramu</correct>;diagramu aktivít;diagramu komunikácii;,lahke,questions/psi-op-q-033mk.xml,
579,resources/q-006ok.png,Druh modelu správania,modely_spravania,,Na obrázku je:,"UML, model správania, modelovanie",9 Štruktúrne modely,09.02 Diagram komunikácie,single-choice,Diagram komunikácií;,Diagram tokov údajov;Sekvenčný diagram;Diagram objektov;<correct>Diagram komunikácií</correct>;,lahke,questions/psi-op-q-033ok.xml,
580,,Ohraničenie diagramov dátových tokov,funkcionalne_modely,,Aké sú ohraničenia techniky diagramov dátových tokov?,"funkcionálny model, diagram tokov údajov, modelovanie",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,Neznázorňuje riadenie;Neznázorňuje podrobnosti vzťahov medzi vstupmi a výstupmi procesu;Neznázorňuje čas a časové následnosti;,<correct>Neznázorňuje riadenie</correct>;Neznázorňuje spracovanie údajov v modelovanom systéme;Neznázorňuje procesy týkajúce sa údajov;<correct>Neznázorňuje podrobnosti vzťahov medzi vstupmi a výstupmi procesu</correct>;<correct>Neznázorňuje čas a časové následnosti</correct>;,stredne,questions/psi-op-q-033pl.xml,
581,,Metódy identifikácie dátových entít,analyza_poziadaviek,,"Metóda identifikácie dátových entít vychádzajúca z opisu správania sa systému, existujúceho funkčného modelu, údajového slovníka a scenárov sa nazýva:","analýza požiadaviek, model údajov",02 Etapy životného cyklu softvéru,02.01 Analýza,single-choice,Interview;,Brainstorming;<correct>Interview</correct>;Metóda Delphi;,lahke,questions/psi-op-q-034mk.xml,
582,,Stav v stavovom diagrame,modely_spravania,y,Stav v stavovom diagrame je:,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,multi-choice,"pomenovaná situácia jedného objektu počas jeho exitencie, v ktorej spĺňa nejakú podmienku, čaká na nejakú udalosť alebo vykonáva nejakú činnosť.;množina okolností alebo atribútov, ktoré charakterizujú osobu alebo vec v danom časovom okamihu.;","<correct>pomenovaná situácia jedného objektu počas jeho exitencie, v ktorej spĺňa nejakú podmienku, čaká na nejakú udalosť alebo vykonáva nejakú činnosť.</correct>;<correct>množina okolností alebo atribútov, ktoré charakterizujú osobu alebo vec v danom časovom okamihu.</correct>;úloha, ktorú musí vykonať systém alebo človek.;",lahke,questions/psi-op-q-034ok.xml,
583,,Softvérové inžinierstvo,softverove_inzinierstvo,,Čo je to softvérové inžinierstvo?,softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,"Systematický prístup k vývoju, prevádzke, údržbe a vyradeniu softvéru;","Programovanie a návrh;Tvorba softvéru;<correct>Systematický prístup k vývoju, prevádzke, údržbe a vyradeniu softvéru</correct>;Postup manažmentu pre riadenie vývojárov na vytvorenie plnohodnotného softvéru.;",trivialne,questions/psi-op-q-034pl.xml,
584,,Reprezentácia údajov v počitači,strukturne_modely,,Pohľad na reprezentáciu údajov v počítači predstavuje:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,Fyzický model údajov;,Konceptuálny model údajov;<correct>Fyzický model údajov</correct>;Logický model údajov;,lahke,questions/psi-op-q-035mk.xml,
585,resources/q-008ok.png,Čoje pravdivé o stavovovom diagrame,modely_spravania,y,O diagrame na obrázku môžeme povedať:,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,multi-choice,"V stave State2 nie je definovaná výstupná akcia.;Akcie v stavoch State2 a State3 určujú, aká akcia sa vykoná pri vstupe do, resp. výstupe zo stavu a tiež aktivitu v stave.;","<correct>V stave State2 nie je definovaná výstupná akcia.</correct>;Nie je prípustné definovať akcie vo vnútri stavov, preto je diagram nesprávny.;Všetky stavy musia mať definované akcie vo vnútri, preto je diagram nesprávny.;Na hrane medzi stavmi State1 a State3 nie je uvedený názov akcie, ktorá sa vykonáva, uvedená je len udalosť, ktorá jej predchádza.;<correct>Akcie v stavoch State2 a State3 určujú, aká akcia sa vykoná pri vstupe do, resp. výstupe zo stavu a tiež aktivitu v stave.</correct>;",stredne,questions/psi-op-q-035ok.xml,
586,,Pohľady na softvérové inžinierstvo,softverove_inzinierstvo,,Vyberte pohľady na softvérové inžinierstvo:,softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],multi-choice,technické aspekty;aspekty manažmentu;psychologické aspekty;,programové aspekty;<correct>technické aspekty</correct>;aspekty rýchlosti vývoja;<correct>aspekty manažmentu</correct>;<correct>psychologické aspekty</correct>;organizačné aspekty;,tazke,questions/psi-op-q-035pl.xml,
587,,Denormalizácia diagramu modelu údajov,strukturne_modely,,Krok denormalizácie navrhovaného modelu je dôležitý pre:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Zefektívnenie fyzického modelu;,Dedičnosť entít v modeli;Zapuzdrenie údajov v modeli;Zníženie redundancie údajov v modeli;Identifikáciu entít pre model údajov;<correct>Zefektívnenie fyzického modelu</correct>;,lahke,questions/psi-op-q-036mk.xml,
588,resources/q-009ok.png,Čo platí o stavovom diagrame,modely_spravania,y,O diagrame na obrázku môžeme povedať:,"UML, stavový diagram, model správania, modelovanie",09 Modely správania,09.03 Stavový diagram,multi-choice,"písmeno D na hrane preprezentuje udalosť.;na prechod zo stavu State1 do stavu State2 je nutné, aby pri výskyte udalosti A bola splnená podmienka B.;","ide o diagram aktivít s dvoma definovanými činnosťami.;diagram je nesprávny, keďže neobsahuje žiadny koncový stav, čo nie je prípustné.;písmeno D na hrane preprezentuje akciu.;<correct>písmeno D na hrane preprezentuje udalosť.</correct>;písmeno C na hrane reprezentuje udalosť vyvolanú podmienkou B.;<correct>na prechod zo stavu State1 do stavu State2 je nutné, aby pri výskyte udalosti A bola splnená podmienka B.</correct>;na prechod zo stavu State1 do stavu State2 je nutné, aby pri výskyte udalosti C bola splnená podmienka B.;",lahke,questions/psi-op-q-036ok.xml,
589,,"""Dobrý"" model údajov",strukturne_modely,y,Medzi vlastnosti „dobrého“ modelu údajov NEPATRÍ:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,dobrý model údajov musí mať maximálne 7 entít;dobrý model údajov musí byť denormalizovaný;dobrý model údajov nesmie mať prekrývajúce väzby;,<correct>dobrý model údajov musí mať maximálne 7 entít</correct>;dobrý model údajov má byť jednoduchý;dobrý model údajov musí byť neredundantný;<correct>dobrý model údajov musí byť denormalizovaný</correct>;<correct>dobrý model údajov nesmie mať prekrývajúce väzby</correct>;dobrý model údajov musí byť pružný a adaptabilný;,lahke,questions/psi-op-q-037mk.xml,
590,,Dĺžka trvania činností,modely_spravania,y,Dá sa na základe sekvenčného diagramu určiť trvanie jednotlivých činností?,"UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,single-choice,Nie. Možné to je len ak si tam sami zavedieme dodatočné merítko.;,"Áno.;Áno, ale len prvý objekt.;<correct>Nie. Možné to je len ak si tam sami zavedieme dodatočné merítko.</correct>;Nie, za žiadnych okolností.;",lahke,questions/psi-op-q-037ok.xml,
591,,Kvalita softvéru,softverove_inzinierstvo,,"Vyberte možnosti, ktorými možno opísať kvalitu softvéru:","softvérové inžinierstvo, kvalita, softvér",01 Úvod do softvérového inžinierstva,01.01 Kvalita,multi-choice,"splnenie požiadaviek;miera stupňa dokonalosti;vhodnosť k danému účelu;schopnosť produktu alebo služby plniť dané potreby;kvalita nie je definovaná ako absolútna miera, ale ako stupeň splnenia požiadaviek, resp. potrieb;","<correct>splnenie požiadaviek</correct>;<correct>miera stupňa dokonalosti</correct>;<correct>vhodnosť k danému účelu</correct>;<correct>schopnosť produktu alebo služby plniť dané potreby</correct>;<correct>kvalita nie je definovaná ako absolútna miera, ale ako stupeň splnenia požiadaviek, resp. potrieb</correct>;",lahke,questions/psi-op-q-037pl.xml,
592,,Špecifikačné diagramy tried,strukturne_modely,,Špecifikačné diagramy tried najlepšie opisuje tvrdenie:,"UML, štruktúrny diagram, diagram tried, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,"reprezentujú triedy ako rozhrania, implementácia metód v rozhraní nie je dôležitá;","<correct>reprezentujú triedy ako rozhrania, implementácia metód v rozhraní nie je dôležitá</correct>;sú podrobné diagramy reprezentujúce triedy a ich vzťahy tak, ako budú implementované v programovacom jazyku;reprezentujú základné pojmy - triedy a ich vzťahy, nezávisia od jazyka;",lahke,questions/psi-op-q-038mk.xml,
593,,Objekty v diagrame komunikácií,modely_spravania,,Objekty v diagrame komunikácií:,"UML, diagram komunikácie, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.02 Diagram komunikácie,multi-choice,sú inštanciami tried.;môžu byť priebežne vytvorené alebo zničené.;,existujú od začiatku do konca.;musia byť vždy pomenované.;<correct>sú inštanciami tried.</correct>;<correct>môžu byť priebežne vytvorené alebo zničené.</correct>;nemôžu posielať správy sami sebe.;,stredne,questions/psi-op-q-038ok.xml,
594,,Úlohy modelu údajov,strukturne_modely,y,"Vyberte z uvedených úloh, ktoré plní model údajov:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,"identifikovanie údajov, ktoré systém prijíma, s ktorými pracuje a ktoré produkuje;vyjadrenie vzťahov medzi identifikovanými údajmi a ich časťami;určenie obsahu údajov;","<correct>identifikovanie údajov, ktoré systém prijíma, s ktorými pracuje a ktoré produkuje</correct>;zapuzdruje údaje;vyhodnocuje údaje, získané zo systému;<correct>vyjadrenie vzťahov medzi identifikovanými údajmi a ich časťami</correct>;<correct>určenie obsahu údajov</correct>;uchovávanie údajov;",stredne,questions/psi-op-q-039mk.xml,
595,,Rozdiely medzi sekvenčnym a komunikačnym diagramom,modely_spravania,y,Čím sa odlišuje diagram komunikácií od sekvenčného diagramu?,"UML, diagram komunikácie, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.02 Diagram komunikácie,single-choice,Diagram komunikácií sa zameriava viac na štruktúru ako na chronológiu posielania správ.;,Nie je medzi nimi žiadny rozdiel.;Sekvenčný diagram patrí medzi funkcionálne modely.;<correct>Diagram komunikácií sa zameriava viac na štruktúru ako na chronológiu posielania správ.</correct>;Sekvenčný diagram sa zameriava viac na štruktúru ako na chronológiu posielania správ.;,lahke,questions/psi-op-q-039ok.xml,
596,resources/q-003ok.png,Interakcie v sekvenčnom diagrame,modely_spravania,,Sekvenčný diagram na obrázku:,"UML, sekvenčný diagram, model správania, modelovanie",09 Modely správania,09.01 Sekvenčný diagram,multi-choice,"volanie findDragon() je synchrónnym volaním.;správa die(), ktorú vysiela objekt d, spôsobuje zánik objektu k.;","<correct>volanie findDragon() je synchrónnym volaním.</correct>;zachytáva životný cyklus entít od vytvorenia po deštrukciu.;volanie react(k) je synchrónnym volaním.;<correct>správa die(), ktorú vysiela objekt d, spôsobuje zánik objektu k.</correct>;Objekt triedy King sa do interakcií nezapája.;",lahke,questions/psi-op-q-040ok.xml,
597,,Softvérový produkt,softverove_inzinierstvo,,Softvérový produkt je:,"softvérové inžinierstvo, softvér",01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,"Zbierka počítačových programov, procedúr, pravidiel a s nimi spojenou dokumentáciou a údajmi.;","Programy dodané zákazníkovi podľa zmluvy.;<correct>Zbierka počítačových programov, procedúr, pravidiel a s nimi spojenou dokumentáciou a údajmi.</correct>;Riešenie vytvorené v softvérovej spoločnosti za účelom priameho alebo nepriameho zisku pre vlastné použitie alebo použitie inou spoločnosťou.;Zbierka programov, údajov a programovej dokumentácie.;",lahke,questions/psi-op-q-040pl.xml,
598,,Typy modelov údajov,strukturne_modely,y,Vyberte základné typy modelov údajov:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Logický model údajov;Fyzický model údajov;Konceptuálny model údajov;,Diagram tried;Entitno-relačný diagram;<correct>Logický model údajov</correct>;<correct>Fyzický model údajov</correct>;Návrhový model údajov;<correct>Konceptuálny model údajov</correct>;Referenčný model údajov;,stredne,questions/psi-op-q-041mk.xml,
599,,Typy softvérových výrobkov,softverove_inzinierstvo,y,Aké základné typy softvérových výrobkov rozpoznávame?,"softvérové inžinierstvo, softvér",01 Úvod do softvérového inžinierstva,01.00 [Main],multi-choice,zákaznícky;generický;,vypočtový;<correct>zákaznícky</correct>;účelový;všeobecný;<correct>generický</correct>;,lahke,questions/psi-op-q-041pl.xml,
600,,Prototypovanie,metody_tvorby_softveru,,"Vyber tvrdenia, ktoré sú pravdivé:","metóda vývoja softvéru, prototyp",05 Metódy tvorby softvéru,05.00 [Main],multi-choice,"Poznáme dva druhy prototypov - prototyp na zahodenie a prieskumný prototyp.;Nejasné požiadavky, ktoré sú kritické vzhľadom na návrh, prototypujeme prototypom na zahodenie.;Prototypovanie vo vývoji softvéru slúži na zníženie rizík tvorby najmä s ohľadom na nejasnú špecifikáciu požiadaviek.;","Prototypujeme neznáme požiadavky, aby sme zistili, čo v špecifikácii chýba.;<correct>Poznáme dva druhy prototypov - prototyp na zahodenie a prieskumný prototyp.</correct>;Prototypovanie sa používa najmä pri vodopádovom vývoji softvéru.;<correct>Nejasné požiadavky, ktoré sú kritické vzhľadom na návrh, prototypujeme prototypom na zahodenie.</correct>;Pri prieskunom prototype sa prototypujú nejasné požiadavky, ktoré sú kritické vzhľadom na návrh.;<correct>Prototypovanie vo vývoji softvéru slúži na zníženie rizík tvorby najmä s ohľadom na nejasnú špecifikáciu požiadaviek.</correct>;",lahke,questions/psi-op-q-042ok.xml,
601,,Nepravdivé tvrdenia opisújúce atribút,strukturne_modely,,Vyberte NEPRAVDIVÉ tvrdenia opisujúce atribút:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Inštancie nemajú atribúty.;Inštancie sa odlišujú názvom atribútov.;Entity sa odlišujú iba menom a primárnym kľúčom.;,Atribút je pomenovaná vlastnosť entity.;<correct>Inštancie nemajú atribúty.</correct>;Inštancie sa odlišujú hodnotami atribútov.;<correct>Inštancie sa odlišujú názvom atribútov.</correct>;Entity sa odlišujú menom a zoznamom atribútov.;<correct>Entity sa odlišujú iba menom a primárnym kľúčom.</correct>;Atribút opisuje čo treba vedieť o entite.;,lahke,questions/psi-op-q-043mk.xml,
602,,Metódy získavania informácií,analyza_poziadaviek,,Čo z nasledujúceho nie je jednou z metód na získavanie informácií?,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,single-choice,Evolučné modelovanie procesov;,Interview;Priama účasť pracovníkov dodávateľa na prácach u zákazníka;Štúdium dokumentov;Rozposielanie dotazníkov;Spoločný vývoj požiadaviek;<correct>Evolučné modelovanie procesov</correct>;Pozorovanie prác u zákazníka;Analýza existujúceho softvérového systému;,lahke,questions/psi-op-q-043ok.xml,
603,,Vlastnosti softvéru,softverove_inzinierstvo,y,Označte vlastnosti softvéru:,"softvérové inžinierstvo, softvér, vlastnosť softvéru",01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,multi-choice,pružnosť;udržovateľnosť;správnosť;spoľahlivosť;,generickosť;<correct>pružnosť</correct>;obmienateľnosť;<correct>udržovateľnosť</correct>;<correct>správnosť</correct>;rýchlosť;<correct>spoľahlivosť</correct>;nákladovosť;,lahke,questions/psi-op-q-043pl.xml,
604,,Štúdium dokumentov,analyza_poziadaviek,,Vyber pravdivé tvrdenia o získavaní informácií prostredníctvom štúdia dokumentov:,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Pri tomto spôsobe existuje nebezpečenstvo zastaraných a neúplných dokumentov.;Ide o dokumenty, ktoré používa zákazník.;","Je to najčastejšie používaná technika na získavanie informácií.;Ide o dokumenty, ktoré boli vytvorené pri inicializácii projektu.;Štúdiom dokumentom získavame verbálne informácie.;Respondenti vyplnia dotazník, tkorý je následne predmetom štúdia.;Zvyčajne ho vedie moderátor.;<correct>Pri tomto spôsobe existuje nebezpečenstvo zastaraných a neúplných dokumentov.</correct>;Používateľovi sa zadáva otázka, ako by riešil danú úlohu. Riešenie je následne predmetom štúdia.;<correct>Ide o dokumenty, ktoré používa zákazník.</correct>;",stredne,questions/psi-op-q-044ok.xml,
605,,Vlastnosti softvéru,softverove_inzinierstvo,y,Označte vlastnosti softvéru:,"softvérové inžinierstvo, softvér, vlastnosť softvéru",01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,multi-choice,bezpečnosť;prenosnosť;použiteľnosť;interoperabilita;,<correct>bezpečnosť</correct>;užitočnosť;<correct>prenosnosť</correct>;<correct>použiteľnosť</correct>;<correct>interoperabilita</correct>;,stredne,questions/psi-op-q-044pl.xml,
606,,Diagramy modelu údajov,strukturne_modely,y,Vyberte diagramy používané pre model údajov:,"štruktúrny diagram, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Entitno-Relačný diagram;Diagram tried;Diagram modelu údajov;,<correct>Entitno-Relačný diagram</correct>;Diagram objektov;Diagram súčiastok;<correct>Diagram tried</correct>;Diagram rozmiestnnia;<correct>Diagram modelu údajov</correct>;,lahke,questions/psi-op-q-045mk.xml,
607,,Definovanie dátových entít,strukturne_modely,y,Pri definovaní dátových entít sa pre každú entitu skúma:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,identita entity;na čo slúži (účel) pomocou vytvorenia definície entity;čo entitu bližšie charakterizuje (atribúty);,<correct>identita entity</correct>;<correct>na čo slúži (účel) pomocou vytvorenia definície entity</correct>;vzťahy k iným entitám;<correct>čo entitu bližšie charakterizuje (atribúty)</correct>;kardinalita vzťahov;údajové typy atribútov;,stredne,questions/psi-op-q-047mk.xml,
608,,Neviditelňosť pri vývoji softvéru,softverove_inzinierstvo,y,Pod neviditeľnosťou ako problém vývoja softvéru chápeme:,"softvérové inžinierstvo, softvér, problém s tvorbou softvéru",01 Úvod do softvérového inžinierstva,01.03 Problémy tvorby softvéru,single-choice,"Neexistuje akceptovateľný spôsob reprezentácie softvérového výrobku tak, aby sa pokryli všetky aspekty;","Softvér sa nedá uchopiť;Softvérový výrobok nie je možné vidieť inak ako na obrazovke a to sťažuje komunikáciu vývojárom;<correct>Neexistuje akceptovateľný spôsob reprezentácie softvérového výrobku tak, aby sa pokryli všetky aspekty</correct>;Manažéri si softvérový produkt nevedia predstaviť tak ako vývojári a teda im nevedia povedať presne čo požadujú;Je zložité vysvetliť podstatu softvéru nezainteresovaným osobám, pretože nevidia do hĺbky daného produktu;",lahke,questions/psi-op-q-047pl.xml,
609,,Identifikácia dátových entít,strukturne_modely,y,"Pre problémovú oblasť evidencie predaja hodín v hodinárstve, identifikujte z uvedených najvhodnejšie dátové entity:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Hodiny;Typ hodín;,<correct>Hodiny</correct>;Nastenné hodiny big;Čas;Minúta;<correct>Typ hodín</correct>;Typ chyby;Digitálne hodiny;,lahke,questions/psi-op-q-048mk.xml,
610,,Špecifikácia požiadaviek,analyza_poziadaviek,,Vyber pravdivé tvrdenia:,"analýza požiadaviek, špecifikácia",02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Dôležitá vlastnosť požiadaviek je ich merateľnosť.;Stav požiadavky sa od jej prijatia priebežne mení podľa toho, čo sa s ňou deje.;Aj vývojár môže prísť s požiadavkami.;Definícia požiadaviek obsahuje opis požiadaviek a ohraničení pre zákazníka. Tento opis je neformálny a abstraktný.;","<correct>Dôležitá vlastnosť požiadaviek je ich merateľnosť.</correct>;Špecifikácia požiadaviek je neformálny a abstratkný súhrn požiadaviek, ktorý slúži ako podklad pre zmluvu.;S návrhom začíname už v rámci špecifikácie požiadaviek.;Jediným zdrojom požiadaviek je používateľ.;<correct>Stav požiadavky sa od jej prijatia priebežne mení podľa toho, čo sa s ňou deje.</correct>;Každá požiadavka má jediné možné riešenie.;<correct>Aj vývojár môže prísť s požiadavkami.</correct>;<correct>Definícia požiadaviek obsahuje opis požiadaviek a ohraničení pre zákazníka. Tento opis je neformálny a abstraktný.</correct>;",stredne,questions/psi-op-q-048ok.xml,
611,,Vnútorné problémy vývoja softvéru,softverove_inzinierstvo,,Označte podstatné vnútorné problémy vývoja softvéru:,"softvérové inžinierstvo, softvér, problém s tvorbou softvéru",01 Úvod do softvérového inžinierstva,01.03 Problémy tvorby softvéru,multi-choice,zložitosť;prispôsobivosť;nestálosť;,<correct>zložitosť</correct>;málo ľudských zdrojov;<correct>prispôsobivosť</correct>;<correct>nestálosť</correct>;finančná náročnosť;viditeľnosť;,lahke,questions/psi-op-q-048pl.xml,
612,,Identifikácia atribútov entity,strukturne_modely,y,"Pre problémovú oblasť evidencie reklamácií v predajni svietidiel jedného živnostníka, identifikujte z uvedených najvhodnejšie atribúty entity Reklamácia:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Meno zákazníka;Produkt;Telefónny kontakt zákazníka;Opis chyby;,<correct>Meno zákazníka</correct>;Zodpovedný zamestnanec;Lampa;<correct>Produkt</correct>;Telefónny kontakt predajcu;<correct>Telefónny kontakt zákazníka</correct>;<correct>Opis chyby</correct>;Rodné číslo zákazníka;,lahke,questions/psi-op-q-049mk.xml,
613,,Činnosti pri špecifikácii požiadaviek,analyza_poziadaviek,,"Vyber, čo platí o činnostiach pri definovaní a špecifikácii požiadaviek:","analýza požiadaviek, tvorba dokumentácie, špecifikácia",02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Špecifikácia požiadaviek sa sústreďuje na softvér a nie na proces jeho tvorby.;Definovanie požiadaviek je transformácia informácií z analýzy požiadaviek do dokumentu, ktorý je určený pre používateľa / zákazníka;Štúdia vhodnosti je rýchla a lacná analýza, ktorá skúma či je reálne vytvoriť systém s danými zdrojmi.;","Štúdia vhodnosti je rýchla a lacná analýza, ktorá skúma súčasný stav.;Poradie činností je nasledovné: štúdia vhodnosti, definovanie požiadaviek, analýza požiadaviek a špecifikácia požiadaviek.;<correct>Špecifikácia požiadaviek sa sústreďuje na softvér a nie na proces jeho tvorby.</correct>;<correct>Definovanie požiadaviek je transformácia informácií z analýzy požiadaviek do dokumentu, ktorý je určený pre používateľa / zákazníka</correct>;Analýza požiadaviek skúma súčasný stav. Ak neexistuje žiadny súčasný systém, táto fáza sa vynecháva.;Štúdia vhodnosti je súčasťou analýzy požiadaviek.;<correct>Štúdia vhodnosti je rýchla a lacná analýza, ktorá skúma či je reálne vytvoriť systém s danými zdrojmi.</correct>;",stredne,questions/psi-op-q-049ok.xml,
614,,Najnakládnejšia časť softvéru,etapy_vyvoja_softveru,,Čo je v modernej dobe (po roku 2000) najnákladnejšie na softvéri?,"softvér, problém s tvorbou softvéru",02 Etapy životného cyklu softvéru,02.05 Údržba,single-choice,údržba;,hardvér;vývoj;<correct>údržba</correct>;dokumentovanie;marketing;,lahke,questions/psi-op-q-049pl.xml,
615,,Určenie vzťahov entít,strukturne_modely,y,"Boli identifikované nasledovné dátové entity - Osoba, Spevák, Skupina, Skladba, Album. Určte z uvedených najvhodnejšie vzťahy medzi uvedenými dátovými entitami:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Osoba-Spevák;Osoba-Skupina;Osoba-Skladba;Spevák-Album;Skupina-Album;Album-Skladba;,<correct>Osoba-Spevák</correct>;<correct>Osoba-Skupina</correct>;<correct>Osoba-Skladba</correct>;Osoba-Album;Spevák-Skupina;Spevák-Skladba;<correct>Spevák-Album</correct>;Skupina-Skladba;<correct>Skupina-Album</correct>;<correct>Album-Skladba</correct>;,stredne,questions/psi-op-q-050mk.xml,
616,,Pravdivé tvrdenia o požiadavkách,analyza_poziadaviek,,Vyber pravdivé tvrdenia:,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,Merateľnosť požiadaviek je dôležitá.;Funkcionálne požiadavky nie sú jediným typom požiadaviek na systém.;,"Poznáme tieto typy požiadaviek: funkcionálne požiadavky, požiadavky na prevádzku systému a požiadavky na výsledný systém ako celok.;<correct>Merateľnosť požiadaviek je dôležitá.</correct>;Špecifikácia nemá vplyv na odhad nákladov.;Do špecifikácie zahŕňame len normálne správanie, ""neočakávané"" situácie, ktoré môžu vzniknúť, sú popísané až v rámci návrhu.;<correct>Funkcionálne požiadavky nie sú jediným typom požiadaviek na systém.</correct>;",stredne,questions/psi-op-q-050ok.xml,
617,,Vývoj požiadaviek a chyby v špecifikácii,analyza_poziadaviek,,Vyber čo platí:,"analýza požiadaviek, tvorba dokumentácie, špecifikácia",02 Etapy životného cyklu softvéru,02.01 Analýza,single-choice,"Čím neskôr sa chyba odhalí, tým viac nákladov je potrebné vynaložiť na jej opravu.;","Požiadavky sú trvalé, relatívne stabilné. Požiadavky sa nevyvíjajú, vyvíja sa návrh a samotné riešenie.;<correct>Čím neskôr sa chyba odhalí, tým viac nákladov je potrebné vynaložiť na jej opravu.</correct>;Najviac chýb zo špecifikácie sa odhalí počas testovania.;Všetky požiadavky sú premenlivé. Trvalé požiadavky sú len naším želaním.;",lahke,questions/psi-op-q-051ok.xml,
618,,Nutné súčasti softvérovho projektu,softverove_inzinierstvo,,Softvérový projekt musí mať:,"softvérové inžinierstvo, softvérový projekt",12 Manažment softvérového projektu,12.00 [Main],multi-choice,"určený dátum začiatku a konca;dobre definované ciele a ohraničenia;stanovené zodpovednosti, rozpočet, rozvrh;","<correct>určený dátum začiatku a konca</correct>;<correct>dobre definované ciele a ohraničenia</correct>;vybratých ľudí na všetky pozície v tímoch;dobrých programátorov;<correct>stanovené zodpovednosti, rozpočet, rozvrh</correct>;",lahke,questions/psi-op-q-051pl.xml,
619,,Vzťahy entít Programátor a Projekt,strukturne_modely,y,"Vyberte z uvedených najvhodnejšie vzťahy pre dátové entity Programátor a Projekt, :","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,implementuje;testuje;upravuje;,prideľuje;obstaráva;<correct>implementuje</correct>;<correct>testuje</correct>;manažuje;<correct>upravuje</correct>;,lahke,questions/psi-op-q-052mk.xml,
620,,Vlastnosti návrhu,navrh,,Vyber čo platí:,návrh softvéru,02 Etapy životného cyklu softvéru,02.02 Návrh,multi-choice,"Modul je súčiastka systému, ktorá vykonáva jednu alebo viac služieb. Používa pritom služby iných modulov. Nepovažuje sa za samostatný systém.;Význam dekompozície spočíva v znižovaní komplexnosti problému. Poznáme niekoľko typov dekompozície v závislosti od toho, podľa čoho dekomponujeme systém.;Vlastnosťou dobrého návrhu je vysoká súdržnosť a nízka zviazanosť.;Návrh softvéru predstavuje transformáciu požiadaviek do počítačovej reprezentácie.;","Modul je systém, ktorého činnosť nezávisí od služieb, ktoré vykonávajú iné moduly. Správanie modulu, ktorý je zahrnutý do systému, samozrejme závisí od komunikácie s inými modulmi;Medzi princípy návrhu patria abstrakcia, konkretizácia, generalizácia, dedenie a polymorfizmus.;<correct>Modul je súčiastka systému, ktorá vykonáva jednu alebo viac služieb. Používa pritom služby iných modulov. Nepovažuje sa za samostatný systém.</correct>;<correct>Význam dekompozície spočíva v znižovaní komplexnosti problému. Poznáme niekoľko typov dekompozície v závislosti od toho, podľa čoho dekomponujeme systém.</correct>;Špecifikácia algoritmov sa vždy šije na mieru používanému programovaciemu jazyku, v ktorom budú implemntované.;<correct>Vlastnosťou dobrého návrhu je vysoká súdržnosť a nízka zviazanosť.</correct>;Opakom abstrakcie je špecializácia.;<correct>Návrh softvéru predstavuje transformáciu požiadaviek do počítačovej reprezentácie.</correct>;",stredne,questions/psi-op-q-052ok.xml,
621,,Procesy manažmentu projektu,softverove_inzinierstvo,,Označte správne tvrdenie o procesoch manažmentu projektu:,"softvérové inžinierstvo, manažment projektu, manažment",12 Manažment softvérového projektu,12.00 [Main],single-choice,"použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu;","riadenie zmien softvérového systému, identifikácia jednotlivých verzií a konfigurácií počas jeho celého životného cyklu;<correct>použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu</correct>;porozumenie existujúcim procesom a ich zmena tak, že sa zlepšia vlastnosti softvéru a/alebo sa redukujú náklady a čas na vývoj (kvalita);",lahke,questions/psi-op-q-052pl.xml,
622,,Vzťahy entít Zákazník a káva,strukturne_modely,y,Aká je kardinalita vzťahu medzi dátovými entitami Zákazník a Káva:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,N:M;,1:1;1:N;N:1;<correct>N:M</correct>;,trivialne,questions/psi-op-q-053mk.xml,
623,,Typy dekompozície,navrh,,Poznáme tieto typy dekompozícií:,"návrh softvéru, dekompozícia",02 Etapy životného cyklu softvéru,02.02 Návrh,single-choice,"funkcionálna, orientovaná na údaje, orientovaná na udalosti, objektovo-orientovaná;","funkcionálna, objektovo-orientovaná;funkcionálna, orientovaná na údaje, orientovaná na zmeny, objektovo-orientovaná;orientovaná na udalosti, orientovaná na zdroje, funkcionálna, objektovo-orientovaná, dekompozícia podľa nákladov;<correct>funkcionálna, orientovaná na údaje, orientovaná na udalosti, objektovo-orientovaná</correct>;",lahke,questions/psi-op-q-053ok.xml,
624,,Procesy životného cyklu softvéru,softverove_inzinierstvo,,Označte základné procesy životného cyklu softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.00 [Main],multi-choice,získavanie;vývoj;prevádzkovanie;dodávanie;údržba;,<correct>získavanie</correct>;<correct>vývoj</correct>;dokumentovanie;<correct>prevádzkovanie</correct>;audit;<correct>dodávanie</correct>;<correct>údržba</correct>;,lahke,questions/psi-op-q-053pl.xml,
625,,Rozloženie vzťahov M:N,strukturne_modely,y,Reprezentácia vzťahu 1:N je prostredníctvom:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,smerníka;cudzieho kľúča (relačná databáza);,<correct>smerníka</correct>;<correct>cudzieho kľúča (relačná databáza)</correct>;väzobnej dátovej entity;,stredne,questions/psi-op-q-054mk.xml,
626,,Charakteristiky modelov životného cyklu softvéru,softverove_inzinierstvo,,Označte charakteristiky modelov životného cyklu softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,definuje časovú následnosť krokov;návrat k predchádzajúcim krokom;odporúčania;každá etapa vytvára „hmatateľné“ výstupy;,<correct>definuje časovú následnosť krokov</correct>;<correct>návrat k predchádzajúcim krokom</correct>;definuje dĺžku trvania krokov a ich rozsah;<correct>odporúčania</correct>;nedefinuje časovú následnosť krokov;správnosť etáp nemusí byť vyhodnotiteľná;<correct>každá etapa vytvára „hmatateľné“ výstupy</correct>;,lahke,questions/psi-op-q-054pl.xml,
627,,Normalizácia,strukturne_modely,,Pokiaľ atribút môže mať najviac jednu hodnotu a relácia medzi triedami nemôže mať kardianlitu N:M hovoríme o:,"štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,1. normálnej forme;,<correct>1. normálnej forme</correct>;2. normálnej forme;3. normálnej forme;4. normálnej forme;,tazke,questions/psi-op-q-055mk.xml,
628,,V-model vývoja softvéru,softverove_inzinierstvo,,Označte čo platí pre V-model vývoja softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,"Etapa na zostupnej hrane modelu súvisí s návrhom a dekompozíciou systému na danej úrovni abstrakcie;Návrat k predchádzajúcim krokom;Etapa na vzostupnej hrane súvisí s integráciou systému, resp. realizácie daného návrhu a jeho integrácie do celého systému;Validácia (testovanie) vo všetkých etapách;","<correct>Etapa na zostupnej hrane modelu súvisí s návrhom a dekompozíciou systému na danej úrovni abstrakcie</correct>;<correct>Návrat k predchádzajúcim krokom</correct>;Jednotlivé etapy na seba nadväzujú len smerom dole;<correct>Etapa na vzostupnej hrane súvisí s integráciou systému, resp. realizácie daného návrhu a jeho integrácie do celého systému</correct>;<correct>Validácia (testovanie) vo všetkých etapách</correct>;",stredne,questions/psi-op-q-055pl.xml,
629,,Normalizácia dátovej entitiy Osoba,strukturne_modely,,"Dátová entita Osoba s atribútmi - osobneCislo, meno, priezvisko, obec, ulica, orientacneCislo je v:","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,2. normálnej forme;,1. normálnej forme;<correct>2. normálnej forme</correct>;3. normálnej forme;4. normálnej forme;,tazke,questions/psi-op-q-056mk.xml,
630,,Získavanie informácií,analyza_poziadaviek,,Vyber pravdivé tvrdenia:,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Medzi najvyužívanejšie metódy patí interview, rozposielanie dotazníkov, štúdium dokumentov a pozorovanie prác u zákazníka.;Kvalitné získavanie informácií o problémovej oblasti a požiadavkách znižuje riziko, že vytvoríme systém, ktorý nebude vyhovovať požiadavkám používateľa.;","Najpoužívanejšou metódou získavania informácií je štúdium dokumentov.;Všetky informácie získavame v písomnej alebo verbálnej forme.;<correct>Medzi najvyužívanejšie metódy patí interview, rozposielanie dotazníkov, štúdium dokumentov a pozorovanie prác u zákazníka.</correct>;Všetky informácie získavame v písomnej alebo grafickej forme.;<correct>Kvalitné získavanie informácií o problémovej oblasti a požiadavkách znižuje riziko, že vytvoríme systém, ktorý nebude vyhovovať požiadavkám používateľa.</correct>;",stredne,questions/psi-op-q-056ok.xml,
631,,Entitno-procesna matica,funkcionalne_modely,,"Uvažujme dátovú entitu Mail a proces dopísania rozpísaného mailu a jeho uloženia. Vyberte z uvedených procesov tie, ktoré je potrebné zaznačiť do Entitno-Procesnej matice pre proces dopísania rozpísaného mailu:","funkcionálny model, diagram tokov údajov, modelovanie",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,Read (R);Modify (M);,Insert (I);<correct>Read (R)</correct>;<correct>Modify (M)</correct>;Delete (D);Archive (A);,tazke,questions/psi-op-q-057mk.xml,
632,,Pozorovanie prác u zákazníka,analyza_poziadaviek,,Čo platí o pozorovaní prác u zákazníka ako metóde pre získavanie informácií?,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Monitorovanie postupu i komentovanie postupu predstavujú istú formu ""rozmýšľania nahlas"". Rozdiel medzi nimi je v tom, že pri monitorovaní používateľ nerieši v skutočnosti žiadny problém, ale iba vysvetľuje, čo by robil pri riešení podobného problému.;Informácie o pozorovaniach predstavujú záznamy o udalostiach a akciách v problémovom prostredí. Používajú sa najmä vtedy, ak verbálne informácie nie sú postačujúce na opis požadovaného správania sa vytváraného systému.;","Monitorovanie postupu i komentovanie postupu predstavujú istú formu ""rozmýšľania nahlas"". Rozdiel je v tom, že pri komentovaní postupu používateľ priebežne objasňuje čo a ako robí, kým pri monitorovaní postupu sa snaží analytik určiť, čo práve používateľ robí.;<correct>Monitorovanie postupu i komentovanie postupu predstavujú istú formu ""rozmýšľania nahlas"". Rozdiel medzi nimi je v tom, že pri monitorovaní používateľ nerieši v skutočnosti žiadny problém, ale iba vysvetľuje, čo by robil pri riešení podobného problému.</correct>;Monitorovanie postupu i komentovanie postupu predstavujú istú formu ""rozmýšľania nahlas"". Rozdiel medzi nimi je v tom, že pri komentovaní používateľ nerieši v skutočnosti žiadny problém, ale iba vysvetľuje, čo by robil pri riešení podobného problému.;Monitorovanie postupu i komentovanie postupu predstavujú istú formu ""rozmýšľania nahlas"". Pri oboch používateľ rieši skutočný problém a vysvetľuje ako a prečo vykonáva jednotlivé kroky riešenia. Jediný rozdiel spočíva v úlohe analytika.;<correct>Informácie o pozorovaniach predstavujú záznamy o udalostiach a akciách v problémovom prostredí. Používajú sa najmä vtedy, ak verbálne informácie nie sú postačujúce na opis požadovaného správania sa vytváraného systému.</correct>;Ide o najpoužívanejšiu metódou získavania informácií.;",stredne,questions/psi-op-q-057ok.xml,
633,,Účastníci v životnom cykle softvéru,softverove_inzinierstvo,,Účastníci v životnom cykle softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.00 [Main],multi-choice,zákazník;dodávateľ;používateľ;,<correct>zákazník</correct>;štát;Google;<correct>dodávateľ</correct>;audítor;<correct>používateľ</correct>;,lahke,questions/psi-op-q-058pl.xml,
634,,Čo je objekt,strukturne_modely,y,Vyberte správne tvrdenia pre objekt v objektovom modeli:,"UML, štruktúrny diagram, diagram objektov, modelovanie",08 Štruktúrne modely,08.02 Diagram objektov,multi-choice,"Objekt je inštancia triedy.;Objekt je niečo, s čím môžeme niečo robiť; entita so správaním.;Objekt má definovanú rolu v problémovom prostredí.;Objekt je abstrakcia nejakej “veci”, ktorá nesie informáciu o stave a ponúka služby iným objektom.;","<correct>Objekt je inštancia triedy.</correct>;Objekt je inštancia dátovej entity.;<correct>Objekt je niečo, s čím môžeme niečo robiť; entita so správaním.</correct>;Objekt je entita, bez správania.;<correct>Objekt má definovanú rolu v problémovom prostredí.</correct>;<correct>Objekt je abstrakcia nejakej “veci”, ktorá nesie informáciu o stave a ponúka služby iným objektom.</correct>;Objekt je konkrétna “vec” reálneho sveta, ktorá presne reprezentuje reálne vlastnosti a správanie.;",lahke,questions/psi-op-q-059mk.xml,
635,,Pravidlá interview,analyza_poziadaviek,,Určte čo platí:,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,single-choice,"Ide o vopred pripravený rozhovor, ktorý zvyčajne vedie moderátor.;","Interview je improvizovaný rozhovor analytika s používateľom.;Moderátor sa snaží, aby sa zákazník prispôsobil technickému jazyku.;Je potrebná starostlivá príprava scenára, ktorý umožní vmanévrovať používateľa presne tam kde ho chceme mať.;<correct>Ide o vopred pripravený rozhovor, ktorý zvyčajne vedie moderátor.</correct>;Dovoľujeme respondentovi ľubovoľne odbočiť od témy, pretože nevedomky nám môže zodpovedať otázky, o ktorých sme ani nevedeli, že ich je potrebné položiť.;Voľné interview sa najviac podobá bežnej konverzácii, orientačné interview sa podobá dopytovaniu, t.j. jednosmernému dialógu, ktorý riadi moderátor na základe vopred pripraveného scenára.;",stredne,questions/psi-op-q-059ok.xml,
636,,Objekty reprezentujúce entity,strukturne_modely,,"Vyberte z uvedených objektov, tie ktoré reprezentujú entity:","UML, modelovanie, štruktúrny diagram, diagram tried, model údajov",08 Štruktúrne modely,08.01 Model údajov a diagram tried,multi-choice,Produkt;Registrácia;Organizácia;Zmluva;,Listener tlačidla;<correct>Produkt</correct>;<correct>Registrácia</correct>;Filter súborov;<correct>Organizácia</correct>;Okno;Tlačidlo;<correct>Zmluva</correct>;Pripojenie do databázy;,stredne,questions/psi-op-q-060mk.xml,
637,,Správne tvrdenia o interview,analyza_poziadaviek,,Vyznač správne odpovede:,analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Interview je najčastejšie používaná metóda získavania informácií.;Dôležité je spracovanie informácií, ktoré získame prostredníctvom interview.;Pri interview je dôležité prispôsobiť sa jazyku zákazníka.;","Je užitočné, ak sa interview podobá výsluchu, pretože respondent tak nemôže priveľmi odbočiť od témy.;Interview je najčastejšia metóda statickej validácie.;<correct>Interview je najčastejšie používaná metóda získavania informácií.</correct>;<correct>Dôležité je spracovanie informácií, ktoré získame prostredníctvom interview.</correct>;Pri orientačnom interview je dôležité prispôsobiť sa jazyku zákazníka, pri štruktúrovanom interview využívame technický jazyk.;<correct>Pri interview je dôležité prispôsobiť sa jazyku zákazníka.</correct>;",lahke,questions/psi-op-q-061ok.xml,
638,,Programátor,softverove_inzinierstvo,,Podľa výskumu Jalote (1997) programátori trávia čas najviac:,"softvérové inžinierstvo, manažment projektu, manažment",12 Manažment softvérového projektu,12.00 [Main],single-choice,komunikáciou týkajúcou sa práce;,programovaním;čítaním programov a príručiek;hľadaním na internete;<correct>komunikáciou týkajúcou sa práce</correct>;pozeraním sociálnych sietí;debugovaním;,stredne,questions/psi-op-q-061pl.xml,
639,,Výber správneho príkladu združenia objektov do triedy,strukturne_modely,,"Z uvedených vzťahov vyberte taký, ktorý predstavuje združenie objektov do spoločnej triedy (Kategórie):","UML, modelovanie, štruktúrny diagram, diagram tried, model údajov",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,Veľkosť obce - Obec;,Nábytok - Stolička;Teleso - Kocka;<correct>Veľkosť obce - Obec</correct>;Osoba - Herec;Lokalita - Obec;,stredne,questions/psi-op-q-062mk.xml,
640,,Čo platí o interview,analyza_poziadaviek,,"Označ, čo platí:",analýza požiadaviek,02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Interview je vopred pripravený rozhovor, ktorý zvyčajne vedie moderátor. Ten by mal pozorne počúvať a neskákať zbytočne do reči, ale nemá počúvať mlčky – treba prejavovať záujem drobnými spresňujúcimi poznámkami.;Pri odpovedi na otázku by sme mali nechať respondentovi čas na rozmyslenie, pri váhaní mu treba pomôcť inou formuláciou otázky. Získané informácie je potrebné spracovať. Nesmieme pripustiť pocit, že interview bolo stratou času, alebo že by išlo o výsluch.;","<correct>Interview je vopred pripravený rozhovor, ktorý zvyčajne vedie moderátor. Ten by mal pozorne počúvať a neskákať zbytočne do reči, ale nemá počúvať mlčky – treba prejavovať záujem drobnými spresňujúcimi poznámkami.</correct>;Interview je najčastejšie používaná technika získavania informácií. Respondent nemá odbočiť od témy, akonáhle to moderátor postrehne mal by mu skočiť do reči. Interview môže mať dĺžku podľa potreby, odporúčaný čas na jedno stretnutie nie je stanovený.;Pri interview je dôležité dodržiavanie pravidiel slušnosti a komunikácie. Štruktúrované interview sa najviac podobá bežnej konverzácii. Pri interview je dôležité, aby sme sa prispôsobili jazyku zákazníka.;Pri interview je dôležité zisťovanie súvislostí. Moderátor si musí starostlivo pripraviť scenár, ktorý určuje, aká časť problémovej oblasti sa bude na stretnutí analyzovať. Dobré interview využíva len otvorené otázky, t.j. také, ktoré vyžadujú odpoveď typu vysvetlenie.;<correct>Pri odpovedi na otázku by sme mali nechať respondentovi čas na rozmyslenie, pri váhaní mu treba pomôcť inou formuláciou otázky. Získané informácie je potrebné spracovať. Nesmieme pripustiť pocit, že interview bolo stratou času, alebo že by išlo o výsluch.</correct>;",stredne,questions/psi-op-q-062ok.xml,
641,,Náplň práce analytika,analyza_poziadaviek,,Náplň práce analytika:,"softvérové inžinierstvo, životný cyklus softvéru, analýza požiadaviek",02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,vyjednať súhlas s požiadavkami;vyriešiť rôzne pohľady používateľov;poradiť v otázkach čo je a nie je technicky možné;na základe požiadaviek používateľa sa podieľať na tvorbe špecifikácie softvéru a architektonického návrhu systému;definovať jednotlivé funkčné bloky a ich informačné prepojenia;,<correct>vyjednať súhlas s požiadavkami</correct>;<correct>vyriešiť rôzne pohľady používateľov</correct>;dohľad nad údržbou softvéru;<correct>poradiť v otázkach čo je a nie je technicky možné</correct>;implementácia riešenia;<correct>na základe požiadaviek používateľa sa podieľať na tvorbe špecifikácie softvéru a architektonického návrhu systému</correct>;<correct>definovať jednotlivé funkčné bloky a ich informačné prepojenia</correct>;,stredne,questions/psi-op-q-062pl.xml,
642,,Proces tvorby podtried,strukturne_modely,,Proces odvodenie podtriedy Faktúra z triedy Dokument sa nazýva:,"modelovanie, štruktúrny diagram, diagram tried, model údajov, objektovo orientovaná tvorba softvéru, ",08 Štruktúrne modely,08.01 Model údajov a diagram tried,single-choice,Špecializácia;,Abstrakcia;Generalizácia;<correct>Špecializácia</correct>;Zapuzdrenie;Polymorfizmus;,trivialne,questions/psi-op-q-063mk.xml,
643,,Dokument špecifikácie požiadaviek na softvér podľa štandardu IEEE 830,manazment_softveru,,"Čo nepatrí medzi veci, ktoré by mali obsahovať dokumenty, ktoré sú v súlade so štandardom IEEE 830 - Špecifikácia požiadaviek na softvér?","manažment, tvorba dokumentácie",11 Manažment softvéru,11.02 Dokumentácia,single-choice,architektonický návrh;,účel;prílohy;<correct>architektonický návrh</correct>;ohraničenia vytváraného systému;požiadavky na rozhrania;,stredne,questions/psi-op-q-063ok.xml,
644,,Polymorfizmus,implementacia,,"Vyberte z uvedených tvrdení tie, ktoré opisujú vlastnosť polymorfie:","implementácia, modelovanie, návrh softvéru",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Polymorfizmus umožňuje použiť namiesto objektu nadtriedy aj objekt ľubovoľnej podtriedy.;Polymorfizmus dovoľuje vytvárať šablóny tried a funkcií, kde je parametrom aj typ spracúvaných údajov. Konkrétny objekt a jeho trieda sa vytvoria špecifikovaním typu spracúvaných údajov a objektov.;Polymorfiymus umožňuje vytvoriť funkcie alebo metódy triedy s rovnakým názvom, aký už existuje, ale s inými parametrami a implementáciou.;Polymorfiymus dovoľuje možnosť prekryť štandardné operátory ako sú + - * /, ale aj napríklad () [].;","<correct>Polymorfizmus umožňuje použiť namiesto objektu nadtriedy aj objekt ľubovoľnej podtriedy.</correct>;<correct>Polymorfizmus dovoľuje vytvárať šablóny tried a funkcií, kde je parametrom aj typ spracúvaných údajov. Konkrétny objekt a jeho trieda sa vytvoria špecifikovaním typu spracúvaných údajov a objektov.</correct>;<correct>Polymorfiymus umožňuje vytvoriť funkcie alebo metódy triedy s rovnakým názvom, aký už existuje, ale s inými parametrami a implementáciou.</correct>;<correct>Polymorfiymus dovoľuje možnosť prekryť štandardné operátory ako sú + - * /, ale aj napríklad () [].</correct>;Polymorfizmus umožňuje prekryť štandardné vzťahy ako je asociácia a definovať tak vlastný typ asociácie.;",lahke,questions/psi-op-q-064mk.xml,
645,,Dokument špecifikácie požiadaviek,manazment_softveru,,Označ pravdivé tvrdenia:,"analýza požiadaviek, manažment, tvorba dokumentácie",11 Manažment softvéru,11.02 Dokumentácia,multi-choice,"Dokument špecifikácie požiadaviek by mal obsahovať opis čo je cieľom, funkcionálne požiadavky, požiadavky na rozhrania a údaje, opis ohraničení a odporúčania, ktoré sú nápomocné pri výbere z rôznych alternatív v návrhu.;Dokument špecifikácie požiadaviek prezentuje analýzu problémovej oblasti a definuje požiadavky na softvér. Podľa toho pre koho je dokument určený sa rozlišuje aj rôzna úroveň podrobnosti a aj jazyk dokumentu.;","Rôzni používatelia môžu mať rôzne požiadavky a priority. Výsledné požiadavky určuje zákazník (objednávateľ), a tieto sú ďalej nemenné.;V dokumente uvádzame čo má systém robiť a s akými údajmi bude pracovať, hardvérvé nároky nie je potrebné v tejto fáze určovať.;<correct>Dokument špecifikácie požiadaviek by mal obsahovať opis čo je cieľom, funkcionálne požiadavky, požiadavky na rozhrania a údaje, opis ohraničení a odporúčania, ktoré sú nápomocné pri výbere z rôznych alternatív v návrhu.</correct>;Špecifikácia požiadaviek nemusí byť úplná, niektoré nedôležité časti môžu byť v dokumente uvedené frázou ""určí sa neskôr"". Dôležitá je však správnosť požiadaviek, ktoré uvedieme celé.;<correct>Dokument špecifikácie požiadaviek prezentuje analýzu problémovej oblasti a definuje požiadavky na softvér. Podľa toho pre koho je dokument určený sa rozlišuje aj rôzna úroveň podrobnosti a aj jazyk dokumentu.</correct>;Požiadavka nemusí byť verifikovateľná, pretože niektoré charakteristiky systému nie je možné prakticky zmerať.;",stredne,questions/psi-op-q-064ok.xml,
646,,Vodopádový model,softverove_inzinierstvo,,Označte pravdivé tvrdenia o vodopádovom modeli životného cyklu softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,"zákazník uvidí systém až na konci projektu; neskoré odhalenie nedostatkov môže vážne ohroziť úspech projektu;dobrá viditeľnosť procesu vývoja, každá činnosť končí výstupom;používateľ nedokáže v počiatočných etapách formulovať úplné požiadavky na systém;","<correct>zákazník uvidí systém až na konci projektu; neskoré odhalenie nedostatkov môže vážne ohroziť úspech projektu</correct>;vyhovuje reálnym projektom, pretože tie často dodržujú jednotlivé kroky v predpísanom poradí;<correct>dobrá viditeľnosť procesu vývoja, každá činnosť končí výstupom</correct>;zvyšuje riziko pri vývoji dobre zvládnutých aplikácií, kde sa používajú známe postupy riešenia;<correct>používateľ nedokáže v počiatočných etapách formulovať úplné požiadavky na systém</correct>;",stredne,questions/psi-op-q-064pl.xml,
647,,Modelovanie softvéru,implementacia,,"Uvažujme triedu s metódou sort(). Potrebujeme však, aby táto metóda implementovala algoritmus quick-sort. Aby sme to dosiahli využijeme vlastnosť:","implementácia, modelovanie, návrh softvéru, vlastnosť softvéru",06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Polymorfizmu;,Abstrakcie;Špecializácie;Zapuzdrenia;<correct>Polymorfizmu</correct>;,lahke,questions/psi-op-q-065mk.xml,
648,,Dokument špecifikácie požiadaviek,manazment_softveru,,Označ pravdivé tvrdenia:,"analýza požiadaviek, tvorba dokumentácie, špecifikácia",02 Etapy životného cyklu softvéru,02.01 Analýza,multi-choice,"Špecifikácia by mala byť úplná, t.j. mala by obsahovať všetky dôležité požiadavky, ktoré sa vzťahujú k funkcionalite, výkonnosti, návrhovým ohraničeniam alebo externým rozhraniam, definíciu reakcie systému na všetky triedy vstupných údajov vo všetkých možných situáciách a označenie všetkých obrázkov, tabuliek a diagramov spolu s odkazmi a definíciu všetkých pojmov a jednotiek.;Pri tvorbe dokumentu špecifikácie treba uvažovať úroveň podrobností, ktorú použijeme a stupeň formalizmu použitej notácie zápisu. Zohľadňujeme pritom adresáta, ktorému je daný dokument určený.;Požiadavky používateľov a požiadavky zákazníka (objednávateľa) sa môžu líšiť. Výsledné požiadavky sú kompromisom, ktorý sa neustále mení.;","<correct>Špecifikácia by mala byť úplná, t.j. mala by obsahovať všetky dôležité požiadavky, ktoré sa vzťahujú k funkcionalite, výkonnosti, návrhovým ohraničeniam alebo externým rozhraniam, definíciu reakcie systému na všetky triedy vstupných údajov vo všetkých možných situáciách a označenie všetkých obrázkov, tabuliek a diagramov spolu s odkazmi a definíciu všetkých pojmov a jednotiek.</correct>;Keďže chceme dosiahnuť stálosť požiadaviek, formulácia požiadavky by mala byť čo najmenej modifikovateľná.;<correct>Pri tvorbe dokumentu špecifikácie treba uvažovať úroveň podrobností, ktorú použijeme a stupeň formalizmu použitej notácie zápisu. Zohľadňujeme pritom adresáta, ktorému je daný dokument určený.</correct>;Špecifikácia požiadaviek by mala byť správna. Každá dokumentovaná požiadavka je taká, že vyvíjaný softvér by ju mal spĺňať. Správnosť zaisťuje používateľ.;Špecifikácia požiadaviek by mala byť sledovateľná, t.j. existuje konečný proces, ktorým človek alebo stroj môže skontrolovať, že softvér spĺňa každú z dokumentovaných požiadaviek.;<correct>Požiadavky používateľov a požiadavky zákazníka (objednávateľa) sa môžu líšiť. Výsledné požiadavky sú kompromisom, ktorý sa neustále mení.</correct>;",stredne,questions/psi-op-q-065ok.xml,
649,,Inkrementálny model životného cyklu softvéru,etapy_vyvoja_softveru,,Označte pravdivé tvrdenia o inkrementálnom modeli životného cyklu softvéru:,"životný cyklus softvéru, softvérový proces",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,"najskôr sa identifikujú všetky požiadavky a navrhne sa architektúra systému;identifikácia všetkých požiadaviek je pri väčšine projektov nemožná;používateľ vidí riešenie dostatočne skoro, identifikujú sa možné problémy a nepochopené požiadavky;","proces je zle viditeľný;<correct>najskôr sa identifikujú všetky požiadavky a navrhne sa architektúra systému</correct>;vytváranie systému po prírastkoch nezodpovedá reálnym podmienkam tvorby softvéru;<correct>identifikácia všetkých požiadaviek je pri väčšine projektov nemožná</correct>;<correct>používateľ vidí riešenie dostatočne skoro, identifikujú sa možné problémy a nepochopené požiadavky</correct>;",stredne,questions/psi-op-q-065pl.xml,
650,,Dokument špecifikácie požiadaviek,manazment_softveru,,Označ pravdivé tvrdenia:,"analýza požiadaviek, tvorba dokumentácie, špecifikácia",11 Manažment softvéru,11.02 Dokumentácia,multi-choice,"Ak špecifikácia obsahuje frázy typu ""určí sa neskôr"" nejde o úplnú špecifikáciu. Niekedy je však takáto formulácia nevyhnutná. Keďženašou snahou je získanie úplnej špecifikácie, v takomto prípade treba opísať dôvody tohto stavu (napr. prečo nepoznáme odpoveď) a čo treba urobiť, aby sme tento stav eliminovali.;Špecifikácia požiadaviek by mala byť modifikovateľná. Štruktúra a štýl každej dokumentovanej požiadavky sú v takom prípade také, že umožňujú jednoduché zmeny tak, aby sa táto štruktúra a štýl zachovali. Vyžaduje sa, aby požiadavky boli neredundantné t.j. každá požiadavka by sa mala v dokumente nachádzať iba na jednom mieste.;Špecifikácia požiadaviek by mala byť sledovateľná. Pôvod každej požiadavky je v tom prípade jasný. Poznáme 2 druhy sledovateľnosti: spätná sledovateľnosť – k predchádzajúcim etapám vývoja; dopredná sledovateľnosť – k dokumentom, ktoré sú zviazané so špecifikáciou v neskorších etapách.;Každá dokumentovaná požiadavka v špecifikácii má identitu a stanovenie dôležitosti a/alebo stability požiadavky. Požiadavky v špecifikácii by mali byť zoradené podľa dôležitosti a/alebo stability.;","Špecifikácia požiadaviek je správna, ak každá dokumentovaná požiadavka je taká, že vyvíjaný softvér by ju mal spĺňať a žiadna požiadavka alebo podmnožina požiadaviek nie je v rozpore s inými požiadavkami.;Špecifikácia požiadaviek by mala byť úplná. Kvôli splneniu tejto vlastnosti akceptujeme aj redundandnosť požiadaviek v špeciikácii.;<correct>Ak špecifikácia obsahuje frázy typu ""určí sa neskôr"" nejde o úplnú špecifikáciu. Niekedy je však takáto formulácia nevyhnutná. Keďženašou snahou je získanie úplnej špecifikácie, v takomto prípade treba opísať dôvody tohto stavu (napr. prečo nepoznáme odpoveď) a čo treba urobiť, aby sme tento stav eliminovali.</correct>;<correct>Špecifikácia požiadaviek by mala byť modifikovateľná. Štruktúra a štýl každej dokumentovanej požiadavky sú v takom prípade také, že umožňujú jednoduché zmeny tak, aby sa táto štruktúra a štýl zachovali. Vyžaduje sa, aby požiadavky boli neredundantné t.j. každá požiadavka by sa mala v dokumente nachádzať iba na jednom mieste.</correct>;Špecifikácia požiadaviek by mala byť jednoznačná, t.j. žiadna požiadavka alebo podmnožina požiadaviek nie je v rozpore s inými požiadavkami.;<correct>Špecifikácia požiadaviek by mala byť sledovateľná. Pôvod každej požiadavky je v tom prípade jasný. Poznáme 2 druhy sledovateľnosti: spätná sledovateľnosť – k predchádzajúcim etapám vývoja; dopredná sledovateľnosť – k dokumentom, ktoré sú zviazané so špecifikáciou v neskorších etapách.</correct>;Správnosť špecifikácie požiadaviek nepostačuje. Špecifikácia musí byť tiež jednoznačná a konzistentná. Ostatné vlastnosti sú užitočné, ale nie nevyhnutné pre dobrú špecifikáciu požiadaviek.;<correct>Každá dokumentovaná požiadavka v špecifikácii má identitu a stanovenie dôležitosti a/alebo stability požiadavky. Požiadavky v špecifikácii by mali byť zoradené podľa dôležitosti a/alebo stability.</correct>",stredne,questions/psi-op-q-066ok.xml,
651,,Iteratívny model životného cyklu softvéru,softverove_inzinierstvo,,Označte pravdivé tvrdenia o iteratívnom modeli životného cyklu softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,"často sa využíva prototypovanie;v každej iterácii sa vytvorí vykonateľný výsledok;proces nie je viditeľný;znižuje riziko pre nové aplikácie, pretože špecifikácia a implementácia sú v súlade;","požiadavky sa definujú na začiatku;<correct>často sa využíva prototypovanie</correct>;problém je že systémy sú silno štruktúrované;<correct>v každej iterácii sa vytvorí vykonateľný výsledok</correct>;<correct>proces nie je viditeľný</correct>;<correct>znižuje riziko pre nové aplikácie, pretože špecifikácia a implementácia sú v súlade</correct>;",stredne,questions/psi-op-q-066pl.xml,
652,,Procesy využívajúce abstrakciu,modelovanie_softveru ,,"Vyberte tie procesy, pri ktorých sa využíva abstrakcia:","abstrakcia, generalizácia, modelovanie, návrh softvéru",06 Prehľad modelovania softvéru,01.00 [Main],multi-choice,Generalizácia;Zapuzdrenie;Polymorfizmus;,<correct>Generalizácia</correct>;Špecializácia;<correct>Zapuzdrenie</correct>;<correct>Polymorfizmus</correct>;,lahke,questions/psi-op-q-067mk.xml,
653,,"Procedúra, technologický postup",softverove_inzinierstvo,,"Procedúra alebo technologický postup, pomocou ktorého sa uskutoční (vykoná) nejaká významná časť životného cyklu softvéru. Takto môžeme v kontexte životného cyklu softvéru definovať:","softvérové inžinierstvo, softvér, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.00 [Main],single-choice,metódu;,technológiu;metodológiu;prostriedok;<correct>metódu</correct>;,lahke,questions/psi-op-q-067ok.xml,
654,,Znovupoužiteľnosť softvéru,softverove_inzinierstvo,,Označte pravdivé tvrdenia o zostavovaní systému zo znovupoužiteľných súčiastok:,"softvérové inžinierstvo, softvér, modelovanie, dekompozícia, údržba softvéru, architektúra softvérových systémov, súdržnosť",04 Základy modelovania softvéru,04.00 [Main],multi-choice,"znižujú sa celkové náklady na vývoj softvéru, riziko neúspechu projektu a aj potrebný čas;problém je, že potrebné softvérové súčiastky nemusia existovať;","znižuje sa spoľahlivosť systému;<correct>znižujú sa celkové náklady na vývoj softvéru, riziko neúspechu projektu a aj potrebný čas</correct>;je to lacný vývoj, pretože súčiastky sú lacné;<correct>problém je, že potrebné softvérové súčiastky nemusia existovať</correct>;",lahke,questions/psi-op-q-067pl.xml,
655,,Súbor metód,softverove_inzinierstvo,,"Súbor metód, ktoré zvyčajne podporujú väčšiu časť životného cyklu softvéru (niekoľko etáp) a vychádzajú z rovnakého prístupu. Takto môžeme definovať:","softvérové inžinierstvo, životný cyklus softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,metodológiu;,prostriedok;technológiu;<correct>metodológiu</correct>;metódu;,lahke,questions/psi-op-q-068ok.xml,
656,,Špirálový model,metody_tvorby_softveru,,Označte pravdivé tvrdenia o špirálovom modeli životného cyklu softvéru:,"softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,každé kolo špirály predstavuje etapu v procese tvorby softvéru;zmluva o vývoji softvérového systému často určuje vopred procesný model a výstupy;zvýrazňuje požiadavky na kvalitu;,<correct>každé kolo špirály predstavuje etapu v procese tvorby softvéru</correct>;upriamuje pozornosť na neskoré odstraňovanie chýb;neuvažuje aspekty manažmentu;<correct>zmluva o vývoji softvérového systému často určuje vopred procesný model a výstupy</correct>;<correct>zvýrazňuje požiadavky na kvalitu</correct>;,stredne,questions/psi-op-q-068pl.xml,
657,,Najpoužívanejší diagram pre modelovanie objektov,strukturne_modely,y,Vyberte najpoužívanejší a základný diagram v objektovo-orientovanej analýze a návrhu:,"diagram tried, entitno-relačný diagram, diagram objektov, diagram komponentov, modelovanie, objektovo orientovaná tvorba softvéru, štruktúrny diagram, UML ",06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Diagram tried;,Entitno-Relačný diagram;Diagram objektov;Diagram súčiastok;<correct>Diagram tried</correct>;Diagram rozmiestnnia;Diagram modelu údajov;,lahke,questions/psi-op-q-069mk.xml,
658,,Metódy vývoja softvéru,metody_tvorby_softveru,,"Vyznač, čo platí o metódach vývoja softvéru:","metóda vývoja softvéru, modelovanie, dátovo-orientovaná metóda, funkcionálne-orientovaný prístup, objektovo orientovaná tvorba softvéru, softvérové inžinierstvo",05 Metódy tvorby softvéru,05.00 [Main],multi-choice,"Metódy vývoja softvéru nedefinujú kritériá validácie.;Podľa toho, na čo sa kladie dôraz, rozlišujeme funkcionálne-orientované, dátovo-orientované a objektovo-orientovaé metódy.;Všetky typy metód vývoja softvéru využívajú hierarchickú reprezentáciu systému.;","Všetky metódy vývoja softvéru sú formálne.;<correct>Metódy vývoja softvéru nedefinujú kritériá validácie.</correct>;Vyžaduje sa uvažovanie externých rozhraní, interné rozhrania sú dôležité len pri objektovo-orientovaných metódach.;<correct>Podľa toho, na čo sa kladie dôraz, rozlišujeme funkcionálne-orientované, dátovo-orientované a objektovo-orientovaé metódy.</correct>;Dátovo-orientované metódy sú úzko spojené s objektovo-orientovanou dekompozíciou.;Definujú základné princípy analýzy a návrhu, nedefinujú však postup.;<correct>Všetky typy metód vývoja softvéru využívajú hierarchickú reprezentáciu systému.</correct>;",tazke,questions/psi-op-q-069ok.xml,
659,,Metódy vývoja softvéru,metody_tvorby_softveru,,"Vyznač, čo platí o metódach vývoja softvéru:","metóda vývoja softvéru, modelovanie, dátovo-orientovaná metóda, funkcionálne-orientovaný prístup, objektovo orientovaná tvorba softvéru, softvérové inžinierstvo",05 Metódy tvorby softvéru,05.00 [Main],multi-choice,"Metódy vývoja softvéru určujú základné princípy analýzy a návrhu, pričom definujú postup, nedefinujú však kritériá validácie.;Nie všetky metódy sú formálne, niektoré sú semiformálne. Líšia sa taktiež použitou notáciou a použitím špecifických postupov.;Všetky metódy požadujú dôsledné uvažovanie interných aj externých rozhraní. Systém reprezentujú hierarchicky.;Rôzne metódy umožňujú vidieť systém odlišným špecifickým pohľadom. Funkcionálnu dekompozíciu je možné odvodiť z identifikovanej dátovej stránky.;","<correct>Metódy vývoja softvéru určujú základné princípy analýzy a návrhu, pričom definujú postup, nedefinujú však kritériá validácie.</correct>;Metódy definujú postup a kritériá validácie, pričom využívajú rôzne notácie. Systém chápu ako množinu funkcií a vzťahov medzi nimi.;Funkcionálne-orientované metódy chápu systém ako množinu funkcií a vzťahov medzi nimi. Hľadajú sa dátové štruktúry, čo nám umožňuje odvodiť dátovú stránku z tej funkcionálnej.;<correct>Nie všetky metódy sú formálne, niektoré sú semiformálne. Líšia sa taktiež použitou notáciou a použitím špecifických postupov.</correct>;<correct>Všetky metódy požadujú dôsledné uvažovanie interných aj externých rozhraní. Systém reprezentujú hierarchicky.</correct>;Metódy vývoja softvéru popisujú základné princípy analýzy a návrhu. Objektovú dekompozíciu je možné vykonať na základe identifikovanej dátovej stránky.;<correct>Rôzne metódy umožňujú vidieť systém odlišným špecifickým pohľadom. Funkcionálnu dekompozíciu je možné odvodiť z identifikovanej dátovej stránky.</correct>;",tazke,questions/psi-op-q-070ok.xml,
660,,Entity v diagrame tokov údajov,funkcionalne_modely,,Entity v diagrame tokov údajov:,"funkcionálny model, diagram tokov údajov, modelovanie",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,proces;tok údajov;úložisko údajov;externá entita;,<correct>proces</correct>;používateľ;údajová banka;<correct>tok údajov</correct>;<correct>úložisko údajov</correct>;rozhodovací uzol;<correct>externá entita</correct>;,lahke,questions/psi-op-q-070pl.xml,
661,,Príklady modelov,modelovanie_softveru ,y,"Vyberte z uvedených možností tie, ktoré predstavujú model:","modelovanie, softvérové inžinierstvo",04 Základy modelovania softvéru,04.00 [Main],multi-choice,Mapa;Fotka;Detské autíčko;,<correct>Mapa</correct>;<correct>Fotka</correct>;Ponorka;<correct>Detské autíčko</correct>;Slon;,lahke,questions/psi-op-q-071mk.xml,
662,,Vzťah funkcionálne- a objektovo-orientovaného prístupu,metody_tvorby_softveru,,Čo platí o vzájomnom vzťahu funkcionálne- a objektovo-orientovaného prístupu?,"metóda vývoja softvéru, modelovanie, funkcionálne-orientovaný prístup, objektovo orientovaná tvorba softvéru",05 Metódy tvorby softvéru,05.00 [Main],multi-choice,Základnou technológiou pri oboch je dekompozícia.;Princípy sa vzájomne dopĺňajú.;,"<correct>Základnou technológiou pri oboch je dekompozícia.</correct>;Funkcionálny prístup smeruje k návrhu funkcií, ktoré operujú nad centralizovaným stavom systému. Objektovo-orientovaný prístup tento centralizovaný systém dekomponuje do množiny interagujúcich objektov.;Objektovo-orientovaný prístup je lepší, preto ním postupne nahrádzame funkcionálny prístup všade tam, kde je to možné.;<correct>Princípy sa vzájomne dopĺňajú.</correct>;",stredne,questions/psi-op-q-071ok.xml,
663,,Entita v diagrame tokov údajov,funkcionalne_modely,,Čo platí o entite úložisko údajov v diagrame tokov údajov?,"funkcionálny model, diagram tokov údajov, modelovanie, dekompozícia, UML",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,"je to miesto, kde sa ukladajú údaje;každé úložisko údajov sa musí v množine DFD nachádzať aspoň raz;","k úložiskám údajov možno pripojiť iba procesy a externé entity;je to informačné prepojenie medzi ostatnými typmi entít;<correct>je to miesto, kde sa ukladajú údaje</correct>;<correct>každé úložisko údajov sa musí v množine DFD nachádzať aspoň raz</correct>;je to takzvaná interná entita;",stredne,questions/psi-op-q-071pl.xml,
664,,Dôvody modelovania softvéru,modelovanie_softveru ,y,Prečo modelujeme systémy?:,"modelovanie, abstrakcia, životný cyklus softvéru",04 Základy modelovania softvéru,04.00 [Main],multi-choice,"Aby sme o nich mohli hovoriť, opisovať, diskutovať a pracovať ešte predtým ako ich skutočne vytvoríme.;Aby sme ich mohli použiť.;Aby sme lepšie pochopili už existujúce systémy (nové, cudzie a pod.).;","<correct>Aby sme o nich mohli hovoriť, opisovať, diskutovať a pracovať ešte predtým ako ich skutočne vytvoríme.</correct>;<correct>Aby sme ich mohli použiť.</correct>;<correct>Aby sme lepšie pochopili už existujúce systémy (nové, cudzie a pod.).</correct>;",lahke,questions/psi-op-q-072mk.xml,
665,,objektovo orientovaná tvorba softvéru,modelovanie_softveru,,Vyznač nepravdivé tvrdenie:,"modelovanie, objektovo orientovaná tvorba softvéru",06 Prehľad modelovania softvéru,06.00 [Main],single-choice,"Objekt je dátová štruktúra v systéme, s ktorou môžeme pracovať pomocou funkcií implementujúcich služby systému.;","Využíva sa koncept ukrytia informácií, dedenie a polymorfizmus.;Každý objekt má svoj vlastný stav, na rozdiel od funkcionálneho prístupu, kde sa systém opisuje ako množina funkcií, ktoré zdieľajú spoločný stav.;<correct>Objekt je dátová štruktúra v systéme, s ktorou môžeme pracovať pomocou funkcií implementujúcich služby systému.</correct>;Systém sa chápe ako množina objektov a vzťahov medzi nimi. Objekty komunikujú prostredníctvom správ.;",stredne,questions/psi-op-q-072ok.xml,
666,,Uzol v dagrame tokov údajov,funkcionalne_modely,y,Čo môže predstavovať uzol v diagrame tokov údajov?,"modelovanie, funkcionálny model, diagram tokov údajov",07 Funkcionálne modely,07.03 Diagram tokov údajov,multi-choice,procesy;externé entity;úložiská údajov;,<correct>procesy</correct>;toky údajov;<correct>externé entity</correct>;<correct>úložiská údajov</correct>;interné entity;,stredne,questions/psi-op-q-072pl.xml,
667,,Výhody modelovania,modelovanie_softveru ,y,"Vyberte z uvedených tvrdení tie, ktoré umožňuje modelovanie:","modelovanie, abstrakcia, návrh softvéru, problém s tvorbou softvéru, logický model",04 Základy modelovania softvéru,04.00 [Main],multi-choice,Zjednodušiť komunikáciu medzi účastníkmi tvorby systému.;Zvýšiť viditeľnosť vývoja systému.;Uvažovať o vlastnostiach skutočného systému bez jeho fyzického zostrojenia.;,<correct>Zjednodušiť komunikáciu medzi účastníkmi tvorby systému.</correct>;<correct>Zvýšiť viditeľnosť vývoja systému.</correct>;Modelovať len skutočné objekty.;Zvyšiť riziko nepochopenia požiadaviek.;<correct>Uvažovať o vlastnostiach skutočného systému bez jeho fyzického zostrojenia.</correct>;,lahke,questions/psi-op-q-073mk.xml,
668,,Metodológia štruktúrovanej analýzy a návrhu systémov (SSADM),metody_tvorby_softveru,,Vyznač pravdivé tvrdenia:,"metóda vývoja softvéru, modelovanie, dekompozícia, návrh softvéru",05 Metódy tvorby softvéru,05.00 [Main],multi-choice,"Vychádza sa z princípu dekompozície.;Využíva sa princíp dekompozície. Na pochopenie určitej časti danej úrovne však nie je potrebná znalosť ostatných častí danej úrovne a častí nižšej úrovne.;Projekt sa člení na malé, dobre definované činnosti, pričom metódy určujú postupnosť týchto činností a súvislosti medzi nimi.;Metodológia štruktúrovanej analýzy a návrhu systémov (SSADM) pokrýva analýzu, špecifikáciu požiadaviek a návrh.;","<correct>Vychádza sa z princípu dekompozície.</correct>;<correct>Využíva sa princíp dekompozície. Na pochopenie určitej časti danej úrovne však nie je potrebná znalosť ostatných častí danej úrovne a častí nižšej úrovne.</correct>;Metodológia štruktúrovanej analýzy a návrhu systémov (SSADM) pokrýva špecifikáciu požiadaviek a analýzu.;<correct>Projekt sa člení na malé, dobre definované činnosti, pričom metódy určujú postupnosť týchto činností a súvislosti medzi nimi.</correct>;Využíva sa princíp dekompozície. Na pochopenie určitej časti danej úrovne je potrebná znalosť ostatných častí danej úrovne a častí nižšej úrovne.;<correct>Metodológia štruktúrovanej analýzy a návrhu systémov (SSADM) pokrýva analýzu, špecifikáciu požiadaviek a návrh.</correct>;",tazke,questions/psi-op-q-073ok.xml,
669,,Diagram prípadov použitia,funkcionalne_modely,y,Čo platí o diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, modelovanie, analýza požiadaviek, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,"zachytáva funkcionalitu systému z pohľadu používateľa;opisuje čo systém robí, uvažujú sa všetky spôsoby použitia systému;","<correct>zachytáva funkcionalitu systému z pohľadu používateľa</correct>;patrí medzi modely správania;<correct>opisuje čo systém robí, uvažujú sa všetky spôsoby použitia systému</correct>;načrtáva ako vyriešiť daný problém;nachádza sa v UML len od verzie 2.0;",lahke,questions/psi-op-q-073pl.xml,
670,resources/q-018mk.png,Zaradenie diagramu k statickému alebo dynamickému modelu,modelovanie_softveru ,,Model na obrázku prestavuje:,"modelovanie, UML, dynamický diagram, diagram správania, štruktúrny diagram, model správania, model údajov",04 Základy modelovania softvéru,04.00 [Main],single-choice,statický model;,dynamický model;<correct>statický model</correct>;,lahke,questions/psi-op-q-074mk.xml,
671,,Štruktúrované metódy,metody_tvorby_softveru,,Vyznač pravdivé tvrdenia:,"metóda vývoja softvéru, štruktúrny diagram, dekompozícia, model údajov, návrh softvéru",05 Metódy tvorby softvéru,05.00 [Main],multi-choice,"Patria sem Jackson System Development (JSD) a Data Structured Systems Development (DSSD).;Hľadajú sa základné štruktúry údajov a funkcionálna stránka sa odvodí od dátovej.;V podstate ide o funkcionálnu dekompozíciu, pričom sa vychádza z údajov;","<correct>Patria sem Jackson System Development (JSD) a Data Structured Systems Development (DSSD).</correct>;Pri JSD je štruktúra údajov hierarchická, pri DSSD nie.;<correct>Hľadajú sa základné štruktúry údajov a funkcionálna stránka sa odvodí od dátovej.</correct>;JSD umožňuje aj vyjadriť počet opakovaní, kým DSSD nie.;<correct>V podstate ide o funkcionálnu dekompozíciu, pričom sa vychádza z údajov</correct>;",tazke,questions/psi-op-q-074ok.xml,
672,,Vzťahy v diagrame prípadov použitia,funkcionalne_modely,y,Aké vzťahy môžu byť medzi aktérmi v diagrame prípadov použitia?,"UML, diagram prípadov použitia, funkcionálny model, modelovanie",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,generalizácia;,používanie (use);asociácia;<correct>generalizácia</correct>;zahrnutie (include);spolupráca;,stredne,questions/psi-op-q-074pl.xml,
673,,Fyzický model,modelovanie_softveru ,y,"Vyberte z uvedených tvrdení tie, ktoré opisujú fyzický model:","fyzický model, implementácia, modelovanie, návrh softvéru, modelovanie, životný cyklus softvéru",04 Základy modelovania softvéru,04.00 [Main],multi-choice,"Reprezentuje návrh systému alebo opis fungovania existujúceho systému.;Opisuje akým spôsobom systém dosahuje analyzované alebo požadované správanie.;Zachytáva fyzické závislosti v analyzovanom systéme, napr. kto vykonáva jednotlivé činnosti.;","Nezávisí od spôsobu implementácie;<correct>Reprezentuje návrh systému alebo opis fungovania existujúceho systému.</correct>;<correct>Opisuje akým spôsobom systém dosahuje analyzované alebo požadované správanie.</correct>;Používa sa pre prvotnú komunikáciu pri objasnení domény.;Neuvažujú sa časové závislosti, ako aj materiálna podstata informácií.;<correct>Zachytáva fyzické závislosti v analyzovanom systéme, napr. kto vykonáva jednotlivé činnosti.</correct>;",stredne,questions/psi-op-q-075mk.xml,
674,,Entity v diagrame činností,funkcionalne_modely,y,Aké entity sa môžu vyskytovať v diagrame činností?,"diagram činností, funkcionálny model, model správania, modelovanie, UML",07 Funkcionálne modely,07.02 Diagram aktivít,multi-choice,akcia;činnosť;spojenie;rozvetvenie;rozhodovací blok;,<correct>akcia</correct>;prechod;<correct>činnosť</correct>;<correct>spojenie</correct>;riadenie;<correct>rozvetvenie</correct>;<correct>rozhodovací blok</correct>;,lahke,questions/psi-op-q-075pl.xml,
675,,Príklad modelovania objednania pizze,modelovanie_softveru ,,Pokiaľ by sme chceli modelovať objednanie pizze použili by sme:,"modelovanie, funkcionálny model, model správania, model údajov",04 Základy modelovania softvéru,04.00 [Main],single-choice,Model údajov;,Štruktúrny model.;Model správania.;Funkcionálny model.;<correct>Model údajov</correct>;Objektový model.;,stredne,questions/psi-op-q-076mk.xml,
676,,Výber pravdivých tvrdení o údržbe softvéru,etapy_vyvoja_softveru,,Vyznač čo platí:,"údržba softvéru, životný cyklus softvéru, softvérový proces, problém s tvorbou softvéru, kvalita, manažment, manažment projektu, reštrukturalizácia, tvorba dokumentácie, reinžinierstvo",02 Etapy životného cyklu softvéru,02.05 Údržba,multi-choice,"Etapy procesu údržby sú: identifikácia problému alebo požiadavka na zmenu, analýza, návrh, implementácia, regresné testovanie, akceptačné testovanie a odovzdanie.;Riadenie údržby je dôležité. Zmeny musia byť dokumentované, prebieha analýza a plánovanie.;Spätné inžinierstvo umožňuje v obmedzenej miere obnoviť návrh a dokumentáciu.;","<correct>Etapy procesu údržby sú: identifikácia problému alebo požiadavka na zmenu, analýza, návrh, implementácia, regresné testovanie, akceptačné testovanie a odovzdanie.</correct>;<correct>Riadenie údržby je dôležité. Zmeny musia byť dokumentované, prebieha analýza a plánovanie.</correct>;Reštrukturalizácia dokáže upratať neštrukturalizovaný nemodulárny neporiadok na štruktúrovaný modulárny systém.;Náklady na údržbu sú menšie oproti nákladom na vývoj.;<correct>Spätné inžinierstvo umožňuje v obmedzenej miere obnoviť návrh a dokumentáciu.</correct>;",stredne,questions/psi-op-q-076ok.xml,
677,,UML,modelovanie_softveru,,Skratka UML znamená:,"UML, modelovanie",06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Unified Modeling Language;,Unique Markup Language;Unique Modeling Literature;Unique Markup Language;Unified Markup Language ;<correct>Unified Modeling Language</correct>;Unified Modeling Literature;,trivialne,questions/psi-op-q-077mk.xml,
678,,Výber pravdivých tvrdení o údržbe softvéru,etapy_vyvoja_softveru,,Vyznač pravdivé tvrdenia:,"údržba softvéru, životný cyklus softvéru, softvérový proces, problém s tvorbou softvéru, kvalita, manažment, manažment projektu, reštrukturalizácia, tvorba dokumentácie, reinžinierstvo",02 Etapy životného cyklu softvéru,02.05 Údržba,multi-choice,"Okrem atribútov meneného softvéru ako typ aplikácie, kvalita návrhu a dokumentácie či vek (skutočný, plánovaný) vplývajú na výšku nákladov na údržbu aj vonkajšie faktory súvisiace s hardvérom a inžiniermi, ktorí sa podieľajú na údržbe.;Dopad zmien je potrebné analyzovať, plánovať a riadne dokumentovať. Dôležité je aj plánovanie preventívnej údržby.;","Požiadavky na údržbu sa vybavujú v poradí, v akom sa objavia.;Reštrukturalizácia (alebo tzv. reinžinierstvo) umožňuje obnovenie dokumentácie či návrhu.;<correct>Okrem atribútov meneného softvéru ako typ aplikácie, kvalita návrhu a dokumentácie či vek (skutočný, plánovaný) vplývajú na výšku nákladov na údržbu aj vonkajšie faktory súvisiace s hardvérom a inžiniermi, ktorí sa podieľajú na údržbe.</correct>;<correct>Dopad zmien je potrebné analyzovať, plánovať a riadne dokumentovať. Dôležité je aj plánovanie preventívnej údržby.</correct>;Udržiavané programy vznikli často pred veľa rokmi a nie sú štruktúrované ani okomentované. Zmeny však zlepšujú štruktúru meneného softvéru.;",tazke,questions/psi-op-q-077ok.xml,
679,,UML,modelovanie_softveru,y,UML NEdefinuje:,"UML, modelovanie",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Sadu programovacích jazykov.;Programovacie techniky.;Spôsob modelovania.;Metódu pre tvorbu modelov.;,<correct>Sadu programovacích jazykov.</correct>;Mechanizmus rozširovnia modelov.;<correct>Programovacie techniky.</correct>;<correct>Spôsob modelovania.</correct>;<correct>Metódu pre tvorbu modelov.</correct>;Sadu modelov.;,lahke,questions/psi-op-q-078mk.xml,
680,,Správnosť v kontexte verifikácie a validácie,softverove_inzinierstvo,,"Cieľom verifikácie a validácie je mimo iného preukázanie požadovaných vlastností, ako sú správnosť, spoľahlivosť, efektívnosť, prenosnosť, bezpečnosť a ďalšie. Čo sa však týka samotnej správnosti:","softvérové inžinierstvo, kvalita, softvér, vlastnosť softvéru",01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,správnosť nie je nevyhnutná a nepostačuje;,"správnosť je nevyhnutná a postačuje;správnosť je nevyhnutná, no sama o sebe nepostačuje;<correct>správnosť nie je nevyhnutná a nepostačuje</correct>;správnosť nie je nevyhnutná, no postačuje;",stredne,questions/psi-op-q-079ok.xml,
681,,Štruktúrne diagramy,strukturne_modely,y,Vyberte štruktúrne diagramy z uvedených diagramov UML 2.0 :,"UML, štruktúrny diagram, modelovanie, dekompozícia, diagram rozmiestnenia, diagram komponentov, diagram modelu údajov, diagram tried, modelovanie",08 Štruktúrne modely,08.00 [Main],multi-choice,Diagram tried.;Kompozitný diagram.;Diagram rozmiestnenia.;Diagram balíčkov.;,Diagram spolupráce.;Stavový diagram.;<correct>Diagram tried.</correct>;<correct>Kompozitný diagram.</correct>;<correct>Diagram rozmiestnenia.</correct>;Časový diagram.;Diagram prípadov použitia.;<correct>Diagram balíčkov.</correct>;,stredne,questions/psi-op-q-080mk.xml,
682,,Výber pravdivých tvrdení o dynamickom testovaní,testovanie,y,"Označ, čo platí o dynamickom testovaní:","testovanie, integrácia a testovanie, kvalita, metóda bielej skrinky, metóda čiernej skrinky,",02 Etapy životného cyklu softvéru,02.04 Testovanie,multi-choice,"Dynamické testovanie vyžaduje funkčný systém alebo danú časť, pretože spočíva v odvodzovaní vlastností výrobku na základe jeho používania s vybranými vstupmi.;Cieľom dynamického testovania je vybrať také vstupy, aby výstupy, ktoré dostaneme odhalili prítomnosť chýb.;","Je možné ho vykonať v každej fáze vývoja, pretože nevyžaduje vykonanie programu.;Testujeme vždy všetky možné vstupy, ktoré je možné do systému zadať.;<correct>Dynamické testovanie vyžaduje funkčný systém alebo danú časť, pretože spočíva v odvodzovaní vlastností výrobku na základe jeho používania s vybranými vstupmi.</correct>;Funkcionálne testovanie sa vykonáva na základe špecifikácie vstupov a im prislúchajúcim výstupov, preto sa nazýva tiež metóda bielej skrinky.;<correct>Cieľom dynamického testovania je vybrať také vstupy, aby výstupy, ktoré dostaneme odhalili prítomnosť chýb.</correct>;",stredne,questions/psi-op-q-080ok.xml,
683,,Výber pravdivých tvrdení o dynamickom testovaní,testovanie,y,"Označ, čo platí o dynamickom testovaní:","testovanie, integrácia a testovanie, kvalita, metóda bielej skrinky, metóda čiernej skrinky,",02 Etapy životného cyklu softvéru,02.04 Testovanie,multi-choice,"Nie je možné vyskúšať všetky možné vstupy. Preto vyberáme prijateľne veľkú množinu na základe testovacieho kritéria.;Snažíme sa, aby rôzne testovacie vstupy odhalili rôzne chyby.;Testovacie kritérium je spoľahlivé, ak všetky množiny vstupov, ktoré ho spĺňajú, odhalia tie isté chyby.;","<correct>Nie je možné vyskúšať všetky možné vstupy. Preto vyberáme prijateľne veľkú množinu na základe testovacieho kritéria.</correct>;<correct>Snažíme sa, aby rôzne testovacie vstupy odhalili rôzne chyby.</correct>;Máme k dispozícii algoritmy, ktoré určia pre ľubovoľný program kritérium, ktoré umožňuje určiť množinu testovacích vstupov ohaľujúcich každú chybu. Väčšinou ich však pre ich zložitosť nemožno použiť.;<correct>Testovacie kritérium je spoľahlivé, ak všetky množiny vstupov, ktoré ho spĺňajú, odhalia tie isté chyby.</correct>;Rôzne testovacie vstupy nemusia vždy odhaliť rôzne chyby. Znásobením počtu vstupov odhaľujúcich tú istú chybu získame väčšiu istotu, že sme nespravili omyl.;Ak testovanie neodhalí žiadne chyby, v tom prípade ho môžeme považovať za úspešné.;",stredne,questions/psi-op-q-081ok.xml,
684,,Výber pravdivých tvrdení o funkcionálnom testovaní,testovanie,y,Čo platí o funkcionálnom testovaní?,"testovanie, integrácia a testovanie, kvalita, metóda čiernej skrinky",02 Etapy životného cyklu softvéru,02.04 Testovanie,multi-choice,"Pri funkcionálnom testovaní sa vstupy odvodzujú priamo zo špecifikácie, neuvažuje sa vnútorná štruktúra modulu/systému.;Pre vstupy/výstupy z jednej triedy ekvivalencie je správanie systému identické.;Neuvažovaním logiky systému výrazne narastá množina testovacích vstupov.;","Testovacie vstupy odvodzuje priamo zo štruktúry modulu/systému, ktorá určuje funkcionalitu.;<correct>Pri funkcionálnom testovaní sa vstupy odvodzujú priamo zo špecifikácie, neuvažuje sa vnútorná štruktúra modulu/systému.</correct>;<correct>Pre vstupy/výstupy z jednej triedy ekvivalencie je správanie systému identické.</correct>;V praxi vykonávame úplné funkcionálne testovanie, aby sme odhalili čo najviac chýb.;Jeden vstup môže pokrývať niekoľko tried ekvivalencie.;<correct>Neuvažovaním logiky systému výrazne narastá množina testovacích vstupov.</correct>;",tazke,questions/psi-op-q-083ok.xml,
685,,Výber pravdivých tvrdení o funkcionálnom testovaní,testovanie,y,Čo platí o funkcionálnom testovaní?,"testovanie, integrácia a testovanie, kvalita, metóda čiernej skrinky",02 Etapy životného cyklu softvéru,02.04 Testovanie,multi-choice,"Každý možný vstup/výstup patrí do jednej z tried ekvivalencie, pre ktoré je správanie systému identické (vstup-výstup);Ak sa pri danom vstupe/výstupe zistí chyba, tak rovnakú chybu možno odhaliť použitím iného vstupu/výstupu z danej triedy ekvivalencie;","Funkcionálne testovanie sa snaží o pokrytie rôznych štruktúr programu - riadiacich ako aj dátových.;Vyžaduje vykonanie programu. Neuvažujeme vnútornú logiku modulu/systému, čo výrazne zmenšuje množinu testovacích vstupov.;<correct>Každý možný vstup/výstup patrí do jednej z tried ekvivalencie, pre ktoré je správanie systému identické (vstup-výstup)</correct>;Testovacie vstupy sa odvádzajú priamo zo špecifikácie. Po identifikácii tried ekvivalencie vyberieme po jednom vstupe z každej, pričom vždy zvolíme stred danej triedy.;<correct>Ak sa pri danom vstupe/výstupe zistí chyba, tak rovnakú chybu možno odhaliť použitím iného vstupu/výstupu z danej triedy ekvivalencie</correct>;Po určení triedy ekvivalencie vyberáme vstupy z nej úplne náhodne, pretože je jedno, ktorý z nich vyberieme.;",tazke,questions/psi-op-q-084ok.xml,
686,,Výber pravdivých tvrdení o štrukturálnom testovaní,testovanie,y,Čo platí o štrukturálnom testovaní?,"testovanie, integrácia a testovanie, kvalita, metóda bielej skrinky",02 Etapy životného cyklu softvéru,02.04 Testovanie,multi-choice,"Ide o druh dynamického testovania, preto sa vyžaduje vykonanie programu.;Vychádza sa z vnútornej štruktúry programu.;Je snaha pokryť rôzne štruktúry programu - riadiace či dátové.;","<correct>Ide o druh dynamického testovania, preto sa vyžaduje vykonanie programu.</correct>;Matematická verifikácia, ktorá využíva znalosť štruktúry programu, je jedným z typov štrukturálneho testovania.;<correct>Vychádza sa z vnútornej štruktúry programu.</correct>;Zo špecifikácie odvodíme vstupy, ktoré pokrývajú riadiace štruktúry v programe.;<correct>Je snaha pokryť rôzne štruktúry programu - riadiace či dátové.</correct>;",stredne,questions/psi-op-q-085ok.xml,
687,,Výber pravdivých tvrdení o statickom testovaní,testovanie,,Vyznač čo platí:,"testovanie, statické overovanie, tvorba dokumentácie",02 Etapy životného cyklu softvéru,02.04 Testovanie,single-choice,Formálnu prehliadku vedie vyškolený moderátor.;,Pri matematickej verifikácii môžu mať dokumenty rôznu formálnu úroveň. Použitý matematický aparát však musí mať formálnu úroveň.;Sledujú sa iba chyby v logike a funkcionalite.;Formálna prehliadka sa vykonáva pomocou predpísaného zoznamu otázok. Poradie krokov je na samotnom moderátorovi.;<correct>Formálnu prehliadku vedie vyškolený moderátor.</correct>;,stredne,questions/psi-op-q-087ok.xml,
688,,Výber pravdivých tvrdení o modularite,modelovanie_softveru ,,Vyznač správne odpovede:,"modelovanie, návrh softvéru, údržba softvéru, vlastnosť softvéru, zviazanosť, softvér, architektúra softvérových systémov",04 Základy modelovania softvéru,04.00 [Main],multi-choice,"Celkové náklady na vývoj sú súčtom nákladov na vývoj modulov a nákladov, ktoré musíme vynaložiť na rozhrania a integráciu.;Cieľom je opätovné použitie častí, zjednodušenie a možnosť nezávislého (samostatného) vývoja.;Modularita znamená rozdelenie celku na menšie časti, s ktorými potom lepšie vieme pracovať.;","<correct>Celkové náklady na vývoj sú súčtom nákladov na vývoj modulov a nákladov, ktoré musíme vynaložiť na rozhrania a integráciu.</correct>;<correct>Cieľom je opätovné použitie častí, zjednodušenie a možnosť nezávislého (samostatného) vývoja.</correct>;Malé moduly sú pravdepodobne jednoduchšie a pravdepodobne nimi môžeme urýchliť prácu systému.;Modulurnosť môže byť dosiahnutá cez dekompozíciu a konkretizáciu.;<correct>Modularita znamená rozdelenie celku na menšie časti, s ktorými potom lepšie vieme pracovať.</correct>;Modul je akýkoľvek ucelený kus programu.;",stredne,questions/psi-op-q-090ok.xml,
689,,Výber pravdivých tvrdení o dobrom návrhu,navrh,,Čo platí o dobrom návrhu?,"návrh softvéru, architektonický návrh, kvalita, súdržnosť, zviazanosť, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.02 Návrh,multi-choice,"Snažíme sa o vysokú súdržnosť a nízku zviazanosť súčiastok.;Musí byť jasný vzťah medzi jednotlivými modelmi a jednotlivými úrovňami návrhu.;Dobrý návrh má používať konzistentné názvoslovie súčiastok.;Dobrý návrh je prispôsobivý a udržovateľný, aby úsilie nutné na zmenu návrhu bolo čo najmenšie.;","<correct>Snažíme sa o vysokú súdržnosť a nízku zviazanosť súčiastok.</correct>;Snažíme sa o vysokú zviazanosť a nízku súdržnosť súčiastok.;<correct>Musí byť jasný vzťah medzi jednotlivými modelmi a jednotlivými úrovňami návrhu.</correct>;Modely a jednotlivé úrovne návrhu majú byť striktne oddelené a nezávislé.;Dobrý návrh je udržovateľný no snažíme sa o čo najväčšiu stálosť.;<correct>Dobrý návrh má používať konzistentné názvoslovie súčiastok.</correct>;<correct>Dobrý návrh je prispôsobivý a udržovateľný, aby úsilie nutné na zmenu návrhu bolo čo najmenšie.</correct>;",stredne,questions/psi-op-q-091ok.xml,
690,,Výber pravdivých tvrdení o súdržnosti,modelovanie_softveru ,,Vyznač správne odpovede:,"súdržnosť, modelovanie, návrh softvéru, údržba softvéru, vlastnosť softvéru",04 Základy modelovania softvéru,04.00 [Main],multi-choice,"Komunikačná súdržnosť je minimálna akceptovateľná. Medzi jej problémy však patrí poskytovanie viac údajov než je potrebné, čo spôsobuje problémy pri znovupoužití;Funkcionálna súdržnosť podporuje znovupoužiteľnosť a umožňuje jednoduchšiu údržbu a lokalizáciu chýb. Súčiastka totiž realizuje práve jednu funkciu a každá jej časť je nutná pre vykonanie danej funkcie;Veľká súdržnosť uľahčuje zmeny, keďže všetko súvisiace sa sústreďuje na jedno miesto;","<correct>Komunikačná súdržnosť je minimálna akceptovateľná. Medzi jej problémy však patrí poskytovanie viac údajov než je potrebné, čo spôsobuje problémy pri znovupoužití</correct>;Pri postupnej súdržnosti sú časti súčiastky zviazané iba riadiacimi konštrukciami a vykonávajú sa postupne za sebou. Môže obsahovať časť celej funkcie alebo časti viacerých funkcií;Pri logickej súdržnosti funkcie spracúvajú rovnaké vstupné údaje a vytvárajú rovnaký výstup;Súdržnosť je miera, do akej sú jednotlivé súčiastky v systéme previazané;<correct>Funkcionálna súdržnosť podporuje znovupoužiteľnosť a umožňuje jednoduchšiu údržbu a lokalizáciu chýb. Súčiastka totiž realizuje práve jednu funkciu a každá jej časť je nutná pre vykonanie danej funkcie</correct>;Funkcionálna a objektová súdržnosť sú jediné akceptovateľné; ostatné typy súdržnosti nájdeme už iba v starých aplikáciách.;<correct>Veľká súdržnosť uľahčuje zmeny, keďže všetko súvisiace sa sústreďuje na jedno miesto</correct>;",tazke,questions/psi-op-q-092ok.xml,
691,,Výber pravdivých tvrdení o zviazanosti,modelovanie_softveru ,,Vyznač správne odpovede:,"zviazanosť, modelovanie, návrh softvéru, údržba softvéru, vlastnosť softvéru",04 Základy modelovania softvéru,04.00 [Main],multi-choice,"Pri riadiacej zviazanosti súčiastka odovzdáva inej súčiastke informáciu, ktorá slúži na riadenie logiky tejto súčiastky, najčastejšie vo forme príznaku;Zviazanosť je miera, do akej sú jednotlivé súčiastky v systéme previazané;Pri voľnej zviazanosti sú súčiastky relatívne nezávislé, podrobnosti spracovania sú ukryté a údaje si odovzdávajú prostredníctvom parametrov alebo správami;","<correct>Pri riadiacej zviazanosti súčiastka odovzdáva inej súčiastke informáciu, ktorá slúži na riadenie logiky tejto súčiastky, najčastejšie vo forme príznaku</correct>;Databázová zviazanosť je len iný názov pre globálnu zviazanosť, používa sa v oblasti práce s databázami;Obsahová zviazanosť je najvýhodnejšia, pretože súčiastky si odovzdávajú údaje ako parametre, pričom využívajú celý obsah;<correct>Zviazanosť je miera, do akej sú jednotlivé súčiastky v systéme previazané</correct>;<correct>Pri voľnej zviazanosti sú súčiastky relatívne nezávislé, podrobnosti spracovania sú ukryté a údaje si odovzdávajú prostredníctvom parametrov alebo správami</correct>;Pri dátovej zviazanosti je potrebné zabezpečiť, aby sa odovzdávali všetky potrebné údaje, preto sa snažíme vyberať maximálnu možnú množinu s tým, že niektoré údaje nemusia byť využité;Veľká zviazanosť uľahčuje zmeny, keďže zmena na jednom mieste sa automaticky šíri na vetky pevne zviazané súčiastky;",tazke,questions/psi-op-q-094ok.xml,
692,,Definícia stavového diagramu,modely_spravania,,"Doplň definíciu: Stavový diagram je reprezentovaný <alef:mark/> grafom, kde uzly reprezentujú <alef:mark/> a hrany reprezentujú <alef:mark/>.","stavový diagram, UML, modelovanie, model správania",09 Modely správania,09.03 Stavový diagram,complement,orientovaným;stavy;prechody;,,lahke,questions/psi-op-q-001ok.xml,
693,,Entity v sekvenčnom diagrame,modely_spravania,,"Doplň definíciu, použi diakritiku: Základnými entitami v sekvenčnom diagrame sú <alef:mark/> (inštancia triedy) a <alef:mark/>.","sekvenčný diagram, UML, modelovanie, model správania",09 Modely správania,09.01 Sekvenčný diagram,complement,objekt;správa;,,lahke,questions/psi-op-q-011ok.xml,
694,resources/q-007mk.png,Výber vhodného názvu atribútu dátovej entity,strukturne_modely,,"Navrhnite najvhodnejší názov pre atribút dátovej entity Atrakcia (v zábavnom parku), ktorý hovorí o tom, či je daná atrakcia opravovaná, pokazená alebo v poriadku (píšte slovenský názov atribútu, bez diakritiky s malými písmenami): <alef:mark/>:String","UML, modelovanie, model údajov, diagram tried",08 Štruktúrne modely,08.01 Model údajov a diagram tried,complement,stav;,,lahke,questions/psi-op-q-013mk.xml,
695,resources/q-003ok.png,Opis procesu z príkladu sekvenčného diagramu,modely_spravania,,"Doplň text opisu procesu, ktorý daný diagram zobrazuje: Objekt triedy <alef:mark/> volá metódu killDragon() objektu <alef:mark/> triedy Knight. V rámci nej objekt k volá dve svoje metódy: <alef:mark/> a <alef:mark/>. Výsledkom prvej je získanie objektu d triedy <alef:mark/>, ktorý sa následne stane argumentom vo volaní druhej metódy. Počas vykonávania metódy attack(d) prichádza k volaniu metódy <alef:mark/> objektu <alef:mark/>. V rámci nej objekt d volá metódu eat(k), ktorej výsledkom je volanie metódy <alef:mark/> spôsobujúcej zánik inštancie k triedy <alef:mark/>.","sekvenčný diagram, UML, modelovanie, model správania",09 Modely správania,09.01 Sekvenčný diagram,complement,King;k;findDragon();attack(d);Dragon;react(k);d;die();Knight;,,stredne,questions/psi-op-q-016ok.xml,
696,resources/q-012mk.png,Zovšeobecnenie tried ovocných stromov,strukturne_modely,,"Zovšeobecnite uvedené triedy na obrázku do abstraktnej triedy, ktorá ich najlepšie vystihuje (píšte slovenský názov triedy, bez diakritiky): <alef:mark/> ovocných stromov je typicky zložený z tvrdej kôstky a dužiny.","UML, modelovanie, model údajov, diagram tried",08 Štruktúrne modely,08.01 Model údajov a diagram tried,complement,Plod;,,lahke,questions/psi-op-q-018mk.xml,
697,,Zavedenie pojmu softvérové inžinierstvo,softverove_inzinierstvo,,Doplň: Pojem softvérové inžinierstvo bol zavedený na konferenciách NATO v rokoch 1968-1969 v súvislosti s diskusiami o tkz. softvérovej <alef:mark/>. (Odpoveď napíšte malými písmenami s diakritikou v slovenčine),softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],complement,kríze;,,stredne,questions/psi-op-q-036pl.xml,
698,resources/q-011pl.png,Chýbajúce pojmy ovplyvňujúce kvality softvéru,softverove_inzinierstvo,,"Doplň: Na obrázku chýbajú 2 pojmy, ktoré ovplyvňujú výslednú kvalitu softvéru. Sú to <alef:mark/> a <alef:mark/>. (Odpoveď napíšte malými písmenami s diakritikou v slovenčine, začnite kratším slovom)","softvérové inžinierstvo, kvalita, softvér",01 Úvod do softvérového inžinierstva,01.01 Kvalita,complement,čas;cena;,,lahke,questions/psi-op-q-038pl.xml,
699,,Chýbajúce pojmy zo softvérového inžinierstva,softverove_inzinierstvo,,"Doplň pojmy zo softvérového inžinierstva: <alef:mark/> je procedúra, postup ako dosiahnuť nejaký výsledok. <alef:mark/> je spôsob ako vykonať určité činnosti. <alef:mark/> je nástroj, ktorý sa použije pri riešení problému. <alef:mark/> je súbor metód a techník predstavujúcich overený postup. (Odpoveď napíšte malými písmenami s diakritikou v slovenčine)",softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],complement,Metóda;technika;prostriedok;Metodológia;,,stredne,questions/psi-op-q-039pl.xml,
700,,Cieľ analýzy a návrhu údajov,strukturne_modely,,"Doplnte uvedené tvrdenie o cieľoch analýzy a návrhu údajov (2 slová oddelené medzerou, píšte v slovenčine s diakritikou): Zabezpečenie transformácie všetkých potrebných informácií do <alef:mark/> a návrh čo najvhodnejšieho spôsobu uchovávania týchto informácií z hľadiska ich následného spracovania.","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,complement,údajových štruktúr;,,stredne,questions/psi-op-q-040mk.xml,
701,,Typy prototypovania,metody_tvorby_softveru,,Doplň: Rozlišujeme dva základné typy prototypov: prototyp <alef:mark/> a <alef:mark/> prototyp.,"prototyp, softvérový prototyp",05 Metódy tvorby softvéru,05.00 [Main],complement,na zahodenie;prieskumný;,,lahke,questions/psi-op-q-041ok.xml,
702,,Základné elementy modelu údajov,strukturne_modely,,"Doplňte uvedené tvrdenie pre základné elementy modelu údajov (1 slovo, píšte v slovenčine s diakritikou): <alef:mark/> je špecifický, jedinečný výskyt entity.","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,complement,Inštancia;,,trivialne,questions/psi-op-q-042mk.xml,
703,,Generický softvér,softverove_inzinierstvo,,Doplňte: Generický softvér delíme na modifikovateľný <alef:mark/> a nemodifikovateľný <alef:mark/> . (Odpoveď napíšte v tvare skratiek po anglicky),"softvérové inžinierstvo, typy softvérových aplikácií, softvér",01 Úvod do softvérového inžinierstva,01.00 [Main],complement,MOTS;COTS;,,tazke,questions/psi-op-q-042pl.xml,
704,,Opis požiadaviek,analyza_poziadaviek,,"Doplň: Cieľom opisu požiadaviek je stanovenie <alef:mark/>, ktoré zákazník požaduje od systému a ohraničenia na jeho <alef:mark/> a prevádzku. Pri jednej požiadavke môže existovať viac <alef:mark/> riešenia. Ak pre požiadavku neexistuje žiadne riešenie, hovoríme, že je <alef:mark/>.","analýza požiadaviek, tvorba dokumentácie, špecifikácia",02 Etapy životného cyklu softvéru,02.01 Analýza,complement,služieb;vývoj;alternatív;nerealizovateľná;,,stredne,questions/psi-op-q-047ok.xml,
705,,Chýbajúci vzťah medzi entami v Galérii,strukturne_modely,,"Doplňte názov vzťahu medzi uvedenými dátovými entitami v Galérii(1 slovo, píšte v slovenčine s diakritikou): Umelec <alef:mark/> Obraz","štruktúrny diagram, diagram modelu údajov, model údajov, modelovanie",08 Štruktúrne modely,08.01 Model údajov a diagram tried,complement,namaľoval;,,trivialne,questions/psi-op-q-051mk.xml,
706,,Stratégie návrhu,navrh,,"Doplň text: Pri návrhu postupujeme podľa jednej zo stratégií návrhu: zhora nadol, <alef:mark/> alebo kombinácia oboch. Stratégia <alef:mark/> predstavuje systematickú dekompozíciu systému, kedy sa identifikujú hlavné komponenty a postupne návrh zjemňujeme. Stratégia <alef:mark/> postupuje od súčiastok, pričom postupne pridávame vrstvy. Najčastejším prípadom je však <alef:mark/>.","návrh softvéru, dekompozícia, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.02 Návrh,complement,zdola nahor;zhora nadol;zdola nahor;kombinácia oboch;,,lahke,questions/psi-op-q-054ok.xml,
707,,Etapy vývoja softvéru,etapy_vyvoja_softveru,,"Doplň: <alef:mark/> znázorňuje súvis jednotlivých etáp vo vývoji softvéru, ako aj výsledky (výstupy) a vstupy jednotlivých etáp. Súvis etáp možno vidieť v aspekte následnosti (znázornený v tvare písmena <alef:mark/> plnými čiarami) ako aj v aspekte abstrakcie (znázornený prerušovanými čiarami a aj ako umiestnenie etáp v rovnakej vodorovnej rovine). (Odpoveď napíšte malými písmenami)","softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],complement,v-model;v;,,lahke,questions/psi-op-q-056pl.xml,
708,,Analýza požiadaviek,analyza_poziadaviek,,Doplň: Analýza a špecifikácia požiadaviek zdôrazňuje <alef:mark/> používateľ chce a nie <alef:mark/> to možno zabezpečiť. (Odpoveď napíšte malými písmenami s diakritikou),"analýza požiadaviek, špecifikácia, tvorba dokumentácie, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.01 Analýza,complement,čo;ako;,,lahke,questions/psi-op-q-057pl.xml,
709,,Rozdiel medzi objektovým a funkcionalnym modelom,strukturne_modely,,"Doplňte tvrdenie pre objekt v objektovom modeli(1 slovo, píšte v slovenčine s diakritikou): Každý objekt má svoj vlastný <alef:mark/>, na rozdiel od funkcionálneho prístupu, kde sa systém opisuje ako množina funkcií, ktoré zdieľajú spoločný <alef:mark/>.","modelovanie, model údajov, funkcionálny model, UML, štruktúrny diagram, dátovo-orientovaná metóda",08 Štruktúrne modely,08.02 Diagram objektov,complement,stav;stav;,,stredne,questions/psi-op-q-058mk.xml,
710,,Typy pozorovania prác,analyza_poziadaviek,,"Urči, ktorému typu pozorovania prác u zákazníka zodpovedá ktorá definícia: Používateľ rieši problém fiktívne, objasňuje postup riešenia, použité techniky a vzájomné súvislosti aplikovaných postupov a znalostí. Je to istá forma ""rozmýšľania nahlas"". Ide o <alef:mark/>. Pri tejto metóde je verbálny opis postupu riešenia rovnako dôležitý ako samotný postup riešenia. Spojenie verbálneho opisu riešenia úlohy so skutočným riešením úlohy dáva vierohodnejší a reálnejší pohľad na postupy použité pri riešení analyzovaného problému. Ide o <alef:mark/>.","analýza požiadaviek, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.01 Analýza,complement,monitorovanie postupu;komentovanie postupu;,,stredne,questions/psi-op-q-058ok.xml,
711,,Chýbajúca rola pri analýze a špecifikácii požiadaviek,analyza_poziadaviek,,"Doplň: <alef:mark/> sa zapája do prác najmä v etapách analýzy a špecifikácie požiadaviek a architektonického návrhu. Jeho úloha je náročná, pretože musí riešiť problémy, na ktoré neexistuje jednoznačná a jediná správna odpoveď. Jeho prácu ovplyvňujú externé okolnosti. Jadro prace spočíva v intenzívnej komunikácii s používateľmi. (Odpoveď napíšte malými písmenami v slovenčine)","analýza požiadaviek, špecifikácia, manažment",02 Etapy životného cyklu softvéru,02.01 Analýza,complement,analytik;,,lahke,questions/psi-op-q-059pl.xml,
712,,Nástroje pre podporu testovania,testovanie,,"Roztrieďte uvedené nástroje podpory testovania na statické a dynamické. Dopĺňajte slová ""statický"" a ""dynamický"": analýza zdrojového textu programu bez jeho vykonania (<alef:mark/>), analýza využívania hardvérových a softvérových prostriedkov (<alef:mark/>), informácie poskytované statickými analyzátormi (<alef:mark/>), simulácia (<alef:mark/>), trasovanie (<alef:mark/>), určenie tých častí programu, ktoré sa vykonávali najčastejšie (<alef:mark/>)",testovanie,02 Etapy životného cyklu softvéru,02.04 Testovanie,complement,statický;dynamický;statický;dynamický;dynamický;dynamický;,,stredne,questions/psi-op-q-060ok.xml,
713,,Vzťah objektu k triede,strukturne_modely,,"Doplňte tvrdenie pre objekt v objektovom modeli(1 slovo, píšte v slovenčine s diakritikou): Objekt je <alef:mark/> triedy.","UML, štruktúrny diagram, diagram objektov, modelovanie, model údajov, objektovo orientovaná tvorba softvéru",08 Štruktúrne modely,08.02 Diagram objektov,complement,inštancia;,,trivialne,questions/psi-op-q-061mk.xml,
714,,Postupnosť vo vodopádovom modeli,etapy_vyvoja_softveru,,Doplň: Pri vodopádovom modeli životného cyklu softvéru sa medzi špecifikáciou požiadaviek a implementáciou nachádza najprv <alef:mark/> návrh a potom <alef:mark/> návrh. (Odpoveď napíšte malými písmenami s diakritikou),"softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru, architektonický návrh, špecifikácia",03 Modely životného cyklu vývoja softvéru,03.00 [Main],complement,architektonický;podrobný;,,stredne,questions/psi-op-q-063pl.xml,
715,,Proces dedenia,modelovanie_softveru ,,"Doplňte názov procesu vytvorenia dedenia(1 slovo, píšte v slovenčine s diakritikou malými písmenami): <alef:mark/> množiny príbuzných tried sa vytvára zovšeobecnená, nadradená trieda,nadtrieda (topclass, superclass), ktorej sú odovzdané spoločné vlastnosti (atribúty a metódy).","UML, modelovanie, model údajov, diagram tried, generalizácia",06 Prehľad modelovania softvéru,06.00 [Main],complement,generalizáciou;,,lahke,questions/psi-op-q-066mk.xml,
716,,Chýbajúci model vývoja softvéru,životný cyklus softvéru,,"Doplň: <alef:mark/> model definuje množinu aktivít, ktoré smerujú k výhre používateľa získaním produktu, ktorý zodpovedá jeho požiadavkám a výhre vývojára vytvorením výsledku s reálnym rozpočtom a rozvrhom. (Odpoveď napíšte malými písmenami v angličtine)","softvérové inžinierstvo, softvér, životný cyklus softvéru, metóda vývoja softvéru",03 Modely životného cyklu vývoja softvéru,03.00 [Main],complement,winwin;,,lahke,questions/psi-op-q-069pl.xml,
717,,Názov prostriedku na opis systému na určitej úrovni abstrakcie,modelovanie_softveru ,,"Doplňte tvrdenie(1 slovo, píšte v slovenčine s diakritikou a malými písmenami): <alef:mark/> opisuje určitý aspekt systému na určitej úrovni abstrakcie.","modelovanie, abstrakcia",04 Základy modelovania softvéru,04.00 [Main],complement,model;,,lahke,questions/psi-op-q-070mk.xml,
718,,Verifikácia a validácia,testovanie,,"Doplň definíciu: Cieľom verifikácie a validácie je odhalenie <alef:mark/> počas vývoja. Test, ktorý neodhalí nesprávne správanie sa systému, je <alef:mark/>. Ďalším cieľom je preukázanie požadovaných <alef:mark/>.",testovanie,02 Etapy životného cyklu softvéru,02.04 Testovanie,complement,chýb;neúspešný;vlastností;,,stredne,questions/psi-op-q-078ok.xml,
719,,UML,modelovanie_softveru ,,"Doplňte tvrdenie o UML (po 1 slove, píšte v slovenčine s diakritikou malými písmenami): Každý UML diagram pozostáva z <alef:mark/> a <alef:mark/>.","UML, modelovanie",06 Prehľad modelovania softvéru,06.00 [Main],complement,entít;vzťahov;,,lahke,questions/psi-op-q-079mk.xml,
720,,Typy dynamického testovania,testovanie,,"Doplň: Poznáme nasledovné typy dynamického testovania: náhodné testovanie, funkcionálne testovanie (na základe špecifikácie vstupov a výstupov; tzv metóda <alef:mark/> skrinky), štukturálne testovanie (na základe vnútornej štruktúry programou; tzv metóda <alef:mark/> skrinky) a testovanie <alef:mark/> (na základe znalosti rozhraní medzi modulmi a špecifikácie programu).","testovanie, metóda bielej skrinky, metóda čiernej skrinky",02 Etapy životného cyklu softvéru,02.04 Testovanie,complement,čiernej;bielej;rozhraní;,,stredne,questions/psi-op-q-082ok.xml,
721,,Typy statického testovania,testovanie,,Doplň: Statické testovanie <alef:mark/> vykonanie programu. Poznáme dva rôzne prístupy: formálnu a neformálnu <alef:mark/> dokumentu a <alef:mark/> verifikáciu.,"testovanie, statické overovanie",02 Etapy životného cyklu softvéru,02.04 Testovanie,complement,nevyžaduje;prehliadku;matematickú;,,stredne,questions/psi-op-q-086ok.xml,
722,,Typy testovania produktu,testovanie,,"Doplň: Testovanie, pomocou ktorého používateľ určí, či produkt spĺňa zadanie, sa nazýva <alef:mark/> testovanie. Testuje sa na reálnych údajoch. Pre generické softvérové výrobky je však nemožné vykonať tieto testy u každého zákazníka. Preto sa využíva <alef:mark/> test, ktorý sa vykonáva na pracovisku, kde sa softvér vyvíja. Pracovníci v známom prostredí sledujú <alef:mark/>, ktorý softvér testuje, a zaznamenávajú chyby. Ďalšou fázou je <alef:mark/> test, kedy používatelia testujú softvér u seba, teda v nznámom prostredí.","testovanie, softvér, akceptačné testovanie, integrácia a testovanie, životný cyklus softvéru",02 Etapy životného cyklu softvéru,02.04 Testovanie,complement,akceptačné;alfa;používateľa;beta;,,lahke,questions/psi-op-q-089ok.xml,
723,,Typy súdržnosti,modelovanie_softveru ,,"Doplň správne typy súdržností, použi diakritiku: Typ súdržnosti, kde funkcie spracúvajú rovnaké vstupné údaje a vytvárajú rovnaký výstup, nazývame <alef:mark/> súdržnosť. Pri použití <alef:mark/> súdržnosti umiestňujeme do jednej súčiastky viaceré logicky podobné funkcie, pričom vždy sa aktivuje jedna z nich. Ak súčiastku tvoria viaceré navzájom nezávislé funkcie, hovoríme o <alef:mark/> súdržnosti. Dôvodom môže byť predpísaná dĺžka modulov či ohraničenia prostredia. Situáciu, kedy sú viaceré funkcie logicky zviazan��, no netreba príznak pri komunikácii súčiastok navzájom, pretože funkcie majú časovú súvislosť (nie inú), charakterizuje <alef:mark/> súdržnosť. Ak elementy súčiastky zabezpečujú činnosti tak, že výstup údajov z jednej slúži ako vstup údajov do druhej, ide o <alef:mark/> súdržnosť. Ak sú časti súčiastky zviazané iba riadiacimi konštrukciami, hovoríme o <alef:mark/> súdržnosti.","súdržnosť, modelovanie, návrh softvéru, údržba softvéru, vlastnosť softvéru",04 Základy modelovania softvéru,04.00 [Main],complement,komunikačná;logickej;náhodnej;časová;postupnú;procedurálnej;,,tazke,questions/psi-op-q-093ok.xml,
724,,Typy zviazanosti,modelovanie_softveru ,,"Doplň správne typy zviazaností, použi diakritiku: Ideálnym typom zviazanosti je <alef:mark/> zviazanosť. V tomto prípade si súčiastky odovzdávajú ako parametre jednoduché údaje alebo zložené údaje, v ktorých sa v súčiastke používajú všetky položky. Ak sa využívajú iba niektoré položky, hovoríme o <alef:mark/> zviazanosti. Naopak najhorším typom zviazanosti je <alef:mark/> zviazanosť, kedy sa súčiastka priamo odvoláva na obsah inej súčiastky prípadne mení obsah inej súčiastky. Ak sa však súčiastky odvolávajú na spoločné údaje, ktoré ležia niekde mimo nich, ide o <alef:mark/> zviazanosť. <alef:mark/> zviazanosť má niektoré jej vlastnosti, ale platia tu určité pravidlá práce s údajmi a existuje kontrola konzistentnosti, preto je výhodnejšia.","zviazanosť, modelovanie, návrh softvéru, údržba softvéru, vlastnosť softvéru",04 Základy modelovania softvéru,04.00 [Main],complement,dátová;parciálnej dátovej;obsahová;globálnu;Databázová;,,impossible,questions/psi-op-q-095ok.xml,
725,,Softvérové inžinierstvo,softverove_inzinierstvo,,Čo je to softvérové inžinierstvo?,softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],multi-choice,"Systematický prístup k vývoju, prevádzke, údržbe a vyradeniu softvéru.;Aplikovanie vedy a matematiky, pri ktorom sa prostredníctvom programov, postupov a s nimi združenej dokumentácie možnosti počítačového vybavenia stávajú užitočnými človeku.","<correct>Systematický prístup k vývoju, prevádzke, údržbe a vyradeniu softvéru.</correct>;Časovo ohraničené úsilie, ktoré sa vyvíja s cieľom vytvorenia jedinečného výsledku.;<correct>Aplikovanie vedy a matematiky, pri ktorom sa prostredníctvom programov, postupov a s nimi združenej dokumentácie možnosti počítačového vybavenia stávajú užitočnými človeku.</correct>;Proces, v ktorom sa potreby používateľa transformujú na požiadavky na softvér, tieto sa transformujú na návrh, návrh sa implementuje v príslušnom programovacom jazyku, tento sa testuje a odovzdá používateľovi.",trivialne,,pressman
726,,Pojem kvalita,softverove_inzinierstvo,,"Definujte pojem ""kvalita"".","kvalita, softvérové inžinierstvo",01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,Miera stupňa dokonalosti.,"<correct>Miera stupňa dokonalosti.</correct>;Procedúra, postup ako dosiahnuť nejaký výsledok.;Spôsob ako vykonať určité činnosti.;Súbor metód a techník predstavujúcich overený postup.",lahke,,pressman
727,,Pojem metóda,softverove_inzinierstvo,,"Definujte pojem ""metóda"".",softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,"Procedúra, postup ako dosiahnuť nejaký výsledok.","Nástroj, ktorý sa použije pri riešení problému;Spôsob ako vykonať určité činnosti.;Súbor metód a techník predstavujúcich overený postup.;<correct>Procedúra, postup ako dosiahnuť nejaký výsledok.</correct>",lahke,,pressman
728,,Pojem technika,softverove_inzinierstvo,,"Definujte pojem ""technika"".",softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,Spôsob ako vykonať určité činnosti.,"Nástroj, ktorý sa použije pri riešení problému;Procedúra, postup ako dosiahnuť nejaký výsledok.;<correct>Spôsob ako vykonať určité činnosti.</correct>;Súbor metód a techník predstavujúcich overený postup.",lahke,,pressman
729,,Pojem nástroj,softverove_inzinierstvo,,"Definujte pojem ""nástroj"".",softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,"Prostriedok, ktorý sa použije pri riešení problému","Miera stupňa dokonalosti.;Procedúra, postup ako dosiahnuť nejaký výsledok.;Spôsob ako vykonať určité činnosti.;<correct>Prostriedok, ktorý sa použije pri riešení problému</correct>",lahke,,pressman
730,,Pojem metodológia,softverove_inzinierstvo,,"Definujte pojem ""metodológia"".",softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,Súbor metód a techník predstavujúcich overený postup.,"Miera stupňa dokonalosti.;Procedúra, postup ako dosiahnuť nejaký výsledok.;Spôsob ako vykonať určité činnosti.;<correct>Súbor metód a techník predstavujúcich overený postup.</correct>",lahke,,pressman
731,,Softvérova kríza,softverove_inzinierstvo,,Pojem softvérová kríza bol definovaný v,softvérové inžinierstvo,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,60-tych rokoch 20. storočia.,<correct>60-tych rokoch 20. storočia.</correct>;70-tych rokoch 20. storočia.;80-tych rokoch 20. storočia.;90-tych rokoch 20. storočia.,stredne,,pressman
732,,Vznik objektovo-orientovaného programovania,softverove_inzinierstvo,,Objektovo-orientované programovanie bolo vyvinuté v,objektovo orientovaná tvorba softvéru,05 Metódy tvorby softvéru,05.00 [Main],single-choice,80-tych rokoch 20. storočia.,60-tych rokoch 20. storočia.;70-tych rokoch 20. storočia.;<correct>80-tych rokoch 20. storočia.</correct>;90-tych rokoch 20. storočia.,stredne,,pressman
733,,Význam 90-tých rokov pre SI,softverove_inzinierstvo,,90-te roky z pohľadu SI su významné,"softvérové inžinierstvo, softvérový proces",01 Úvod do softvérového inžinierstva,01.00 [Main],multi-choice,definovaním a používaním schém a vzorov (napr. návrhové vzory).;použivaním metrík pri sledovaní kvality softvéroveho procesu.,<correct>definovaním a používaním schém a vzorov (napr. návrhové vzory).</correct>;<correct>použivaním metrík pri sledovaní kvality softvéroveho procesu.</correct>;vznikom objektovo-orientovaného programovania.;vznikom CASE prostriedkov.,tazke,,pressman
734,,Softvér,softverove_inzinierstvo,,Čo zahrňuje softvér?,softvér,01 Úvod do softvérového inžinierstva,01.00 [Main],multi-choice,počítačové programy;dokumentáciu;procedúry a pravidlá,<correct>počítačové programy</correct>;<correct>dokumentáciu</correct>;externé fyzické zariadenia;<correct>procedúry a pravidlá</correct>,trivialne,,pressman
735,,Generický softvér,softverove_inzinierstvo,,Generický typ softvérových výrobkov je:,typy softvérových aplikácií,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,softvér predávaný ľubovoľnému záujemcovi,softvér vytváraný na základe požiadaviek konkrétneho zákazníka;<correct>softvér predávaný ľubovoľnému záujemcovi</correct>,trivialne,,pressman
736,,Zákaznícky softér,softverove_inzinierstvo,,Zákaznícky typ softvérových výrobkov je:,typy softvérových aplikácií,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,softvér vytváraný na základe požiadaviek konkrétneho zákazníka,<correct>softvér vytváraný na základe požiadaviek konkrétneho zákazníka</correct>;softvér predávaný ľubovoľnému záujemcovi,trivialne,,pressman
737,,Udžovateľnosť,softverove_inzinierstvo,,Udržovateľnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Úsilie, ktoré treba vynaložiť na ďalší vývoj a údržbu výrobku podľa meniacich sa potrieb zákazníka a aj meniaceho sa okolia.","Úsilie, ktoré treba vynaložiť na to, aby sa dal výrobok používať.;Úsilie, ktoré treba na modifikáciu výrobku v prevádzke (napr. zvýšenie jeho funkcionality).;Úsilie, ktoré treba na zabezpečenie spolupráce systému s inými systémami.;<correct>Úsilie, ktoré treba vynaložiť na ďalší vývoj a údržbu výrobku podľa meniacich sa potrieb zákazníka a aj meniaceho sa okolia.</correct>",lahke,,pressman
738,,Použiteľnosť,softverove_inzinierstvo,,Použiteľnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Úsilie, ktoré treba vynaložiť na to, aby sa dal výrobok používať.","<correct>Úsilie, ktoré treba vynaložiť na to, aby sa dal výrobok používať.</correct>;Úsilie, ktoré treba na modifikáciu výrobku v prevádzke (napr. zvýšenie jeho funkcionality).;Úsilie, ktoré treba na zabezpečenie spolupráce systému s inými systémami.;Úsilie, ktoré treba vynaložiť na ďalší vývoj a údržbu výrobku podľa meniacich sa potrieb zákazníka a aj meniaceho sa okolia.",lahke,,pressman
739,,Interoperabilita,softverove_inzinierstvo,,Interoperabilita softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Úsilie, ktoré treba na zabezpečenie spolupráce systému s inými systémami.","Úsilie, ktoré treba vynaložiť na to, aby sa dal výrobok používať.;Úsilie, ktoré treba na modifikáciu výrobku v prevádzke (napr. zvýšenie jeho funkcionality).;<correct>Úsilie, ktoré treba na zabezpečenie spolupráce systému s inými systémami.</correct>;Úsilie, ktoré treba vynaložiť na ďalší vývoj a údržbu výrobku podľa meniacich sa potrieb zákazníka a aj meniaceho sa okolia.",lahke,,pressman
740,,Pružnosť softvéru,softverove_inzinierstvo,,Pružnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Úsilie, ktoré treba na modifikáciu výrobku v prevádzke (napr. zvýšenie jeho funkcionality).","Úsilie, ktoré treba vynaložiť na to, aby sa dal výrobok používať.;<correct>Úsilie, ktoré treba na modifikáciu výrobku v prevádzke (napr. zvýšenie jeho funkcionality).</correct>;Úsilie, ktoré treba na zabezpečenie spolupráce systému s inými systémami.;Úsilie, ktoré treba vynaložiť na ďalší vývoj a údržbu výrobku podľa meniacich sa potrieb zákazníka a aj meniaceho sa okolia.",lahke,,pressman
741,,Správnosť softvéru,softverove_inzinierstvo,,Správnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Miera, do akej výrobok spĺňa špecifikáciu","<correct>Miera, do akej výrobok spĺňa špecifikáciu</correct>;Splnenie kritérií na využitie zdrojov počítačového systému, na čas potrebný na realizáciu a ďalších kritérií spojených so samotným vývojom (napr. náklady).;Správanie sa výrobku pri výpadku – výrobok by nemal pri výpadku systému spôsobiť ani fyzické ani ekonomické škody.;Miera, do akej sú všetky rozhodnutia počas vývoja zdokumentované a kontinuita dokumentácie počas všetkých etáp.",lahke,,pressman
742,,Efketívnosť softvéru,softverove_inzinierstvo,,Efektívnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Splnenie kritérií na využitie zdrojov počítačového systému, na čas potrebný na realizáciu a ďalších kritérií spojených so samotným vývojom (napr. náklady).","<correct>Splnenie kritérií na využitie zdrojov počítačového systému, na čas potrebný na realizáciu a ďalších kritérií spojených so samotným vývojom (napr. náklady).</correct>;Miera, do akej výrobok spĺňa špecifikáciu;Správanie sa výrobku pri výpadku – výrobok by nemal pri výpadku systému spôsobiť ani fyzické ani ekonomické škody.;Miera, do akej sú všetky rozhodnutia počas vývoja zdokumentované a kontinuita dokumentácie počas všetkých etáp.",lahke,,pressman
743,,Spoľahlivosť softvéru,softverove_inzinierstvo,,Spoľahlivosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,Správanie sa výrobku pri výpadku – výrobok by nemal pri výpadku systému spôsobiť ani fyzické ani ekonomické škody.,"Miera, do akej výrobok spĺňa špecifikáciu;Miera, do akej sú všetky rozhodnutia počas vývoja zdokumentované a kontinuita dokumentácie počas všetkých etáp.;Splnenie kritérií na využitie zdrojov počítačového systému, na čas potrebný na realizáciu a ďalších kritérií spojených so samotným vývojom (napr. náklady).;<correct>Správanie sa výrobku pri výpadku – výrobok by nemal pri výpadku systému spôsobiť ani fyzické ani ekonomické škody.</correct>",lahke,,pressman
744,,Dokumentovateľnosť softvéru,softverove_inzinierstvo,,Dokumentovateľnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Miera, do akej sú všetky rozhodnutia počas vývoja zdokumentované a kontinuita dokumentácie počas všetkých etáp.","Správanie sa výrobku pri výpadku – výrobok by nemal pri výpadku systému spôsobiť ani fyzické ani ekonomické škody.;<correct>Miera, do akej sú všetky rozhodnutia počas vývoja zdokumentované a kontinuita dokumentácie počas všetkých etáp.</correct>;Miera, do akej výrobok spĺňa špecifikáciu;Splnenie kritérií na využitie zdrojov počítačového systému, na čas potrebný na realizáciu a ďalších kritérií spojených so samotným vývojom (napr. náklady).",lahke,,pressman
745,,Bezpečnosť softvéru,softverove_inzinierstvo,,Bezpečnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,Miera odolnosti voči neoprávneným zásahom do systému.,"Miera, do akej možno jednotlivé časti výrobku znovu použiť iných podobných aplikáciách.;Úsilie, ktoré treba vynaložiť na testovanie vlastností výrobku, napr. či vykazuje požadované správanie.;<correct>Miera odolnosti voči neoprávneným zásahom do systému.</correct>;Úsilie, ktoré treba na prenos výrobku z jednej platformy na inú (prostredie, v ktorom sa prevádzkuje).",lahke,,pressman
746,,Prenosnosť softvéru,softverove_inzinierstvo,,Prenosnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Úsilie, ktoré treba na prenos výrobku z jednej platformy na inú (prostredie, v ktorom sa prevádzkuje).","<correct>Úsilie, ktoré treba na prenos výrobku z jednej platformy na inú (prostredie, v ktorom sa prevádzkuje).</correct>;Miera, do akej možno jednotlivé časti výrobku znovu použiť iných podobných aplikáciách.;Miera odolnosti voči neoprávneným zásahom do systému.;Úsilie, ktoré treba vynaložiť na testovanie vlastností výrobku, napr. či vykazuje požadované správanie.",lahke,,pressman
747,,Zákaznícky softér,softverove_inzinierstvo,,Znovupoužiteľnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Miera, do akej možno jednotlivé časti výrobku znovu použiť iných podobných aplikáciách.","<correct>Miera, do akej možno jednotlivé časti výrobku znovu použiť iných podobných aplikáciách.</correct>;Úsilie, ktoré treba vynaložiť na testovanie vlastností výrobku, napr. či vykazuje požadované správanie.;Miera odolnosti voči neoprávneným zásahom do systému.;Úsilie, ktoré treba na prenos výrobku z jednej platformy na inú (prostredie, v ktorom sa prevádzkuje).",lahke,,pressman
748,,Testovateľnosť softvéru,softverove_inzinierstvo,,Testovateľnosť softvéru je:,vlastnosť softvéru,01 Úvod do softvérového inžinierstva,01.02 Vlastnosti softvéru,single-choice,"Úsilie, ktoré treba vynaložiť na testovanie vlastností výrobku, napr. či vykazuje požadované správanie.","Miera, do akej možno jednotlivé časti výrobku znovu použiť iných podobných aplikáciách.;Úsilie, ktoré treba na prenos výrobku z jednej platformy na inú (prostredie, v ktorom sa prevádzkuje).;<correct>Úsilie, ktoré treba vynaložiť na testovanie vlastností výrobku, napr. či vykazuje požadované správanie.</correct>;Miera odolnosti voči neoprávneným zásahom do systému.",lahke,,pressman
749,,Vnútorné problémy tvorby softvéru,metody_tvorby_softveru,,"Vyberte podstatné, vnútorné problémy tvorby softvéru.",problém s tvorbou softvéru,01 Úvod do softvérového inžinierstva,01.03 Problémy tvorby softvéru,multi-choice,zložitosť;nestálosť,<correct>zložitosť</correct>;nedostatok dokumentácie;<correct>nestálosť</correct>;cena,stredne,,pressman
750,,Proces vývoja softvéru,etapy_vyvoja_softveru,,Proces vývoja softvéru definuje:,softvérový proces,01 Úvod do softvérového inžinierstva,01.00 [Main],multi-choice,ako dosiahneme určitý cieľ;role a ich zodpovednosti,<correct>ako dosiahneme určitý cieľ</correct>;<correct>role a ich zodpovednosti</correct>;cenu výsledného produktu;odhadovanú dĺžku vývoja,lahke,,pressman
751,,Životný cyklus softvéru,etapy_vyvoja_softveru,,Aké sú podstatné charakteristiky každého modelu životného cyklu softvéru?,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,definuje jednotlivé etapy vývoja;definuje činnosti jednotlivých etáp;definuje vstupy a výstupy etáp,<correct>definuje jednotlivé etapy vývoja</correct>;definuje náklady spojené s každou etapou vývoja;<correct>definuje činnosti jednotlivých etáp</correct>;definuje problémy spojené s každou etapou;<correct>definuje vstupy a výstupy etáp</correct>,lahke,,pressman
752,,Životný cyklus softvéru,etapy_vyvoja_softveru,,Čo nedefinuje model životného cyklu softvéru:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,dĺžku trvania krokov a ich rozsah,časovú následnosť krokov;vstupy krokov;činnosti jednotlivých krokov;<correct>dĺžku trvania krokov a ich rozsah</correct>,lahke,,pressman
753,,V-model,etapy_vyvoja_softveru,,V-model vývoja softvéru neobsahuje:,"životný cyklus softvéru, softvérový prototyp",03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,postupnú evolúcia prototypu,akceptačné testovanie;<correct>postupnú evolúcia prototypu</correct>;inštaláciu,stredne,,pressman
754,,V-model Štúdia vhodnosti,etapy_vyvoja_softveru,,Štúdia vhodnosti sa vykonáva vo fáze V-modelu:,"životný cyklus softvéru, štúdia vhodnosti",03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,analýzy a špecifikácie požiadaviek,<correct>analýzy a špecifikácie požiadaviek</correct>;architektonického návrhu;podrobného návrhu;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
755,,V-model Akceptačné testovanie,etapy_vyvoja_softveru,,Akceptačné testovanie sa plánuje vo fáze V-modelu:,"životný cyklus softvéru, akceptačné testovanie",03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,analýzy a špecifikácie požiadaviek,<correct>analýzy a špecifikácie požiadaviek</correct>;architektonického návrhu;podrobného návrhu;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
756,,V-model Celková koncepcia systému,etapy_vyvoja_softveru,,Celková koncepcia systému sa ujasňuje vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,architektonického návrhu,analýzy a špecifikácie požiadaviek;<correct>architektonického návrhu</correct>;podrobného návrhu;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
757,,V-model Návrh dekompozície,etapy_vyvoja_softveru,,Návrh dekompozície systému sa vykonáva vo fáze V-modelu:,"životný cyklus softvéru, dekompozícia",03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,architektonického návrhu,analýzy a špecifikácie požiadaviek;<correct>architektonického návrhu</correct>;podrobného návrhu;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
758,,V-model Celkový koncept interného testovania,etapy_vyvoja_softveru,,Celkový koncept interného testovanie systému sa plánuje vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,architektonického návrhu,analýzy a špecifikácie požiadaviek;<correct>architektonického návrhu</correct>;podrobného návrhu;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
759,,V-model Nasadzovanie systému,etapy_vyvoja_softveru,,Nasadzovanie systému sa plánuje vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,architektonického návrhu,analýzy a špecifikácie požiadaviek;<correct>architektonického návrhu</correct>;podrobného návrhu;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
760,,V-model Softvérové súčiastky,etapy_vyvoja_softveru,,Softvérové súčiastky sa do detailu špecifikujú vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,podrobného návrhu,analýzy a špecifikácie požiadaviek;architektonického návrhu;<correct>podrobného návrhu</correct>;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
761,,V-model Rozhranie softvérových súčiastok,etapy_vyvoja_softveru,,Rozhrania softvérových súčiastok sa špecifikujú vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,podrobného návrhu,analýzy a špecifikácie požiadaviek;architektonického návrhu;<correct>podrobného návrhu</correct>;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
762,,V-model Logická štruktúra údajov,etapy_vyvoja_softveru,,Logická štruktúra údajov sa špecifikuje vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,podrobného návrhu,analýzy a špecifikácie požiadaviek;architektonického návrhu;<correct>podrobného návrhu</correct>;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
763,,V-model Fyzická štruktúra údajov,etapy_vyvoja_softveru,,Fyzická štruktúra údajov sa špecifikuje vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,podrobného návrhu,analýzy a špecifikácie požiadaviek;architektonického návrhu;<correct>podrobného návrhu</correct>;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
764,,V-model Testovanie jednotlivých súčiastok,etapy_vyvoja_softveru,,Testovanie jednotlivých súčiastok sa plánuje vo fáze V-modelu:,"životný cyklus softvéru, testovanie",03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,podrobného návrhu,analýzy a špecifikácie požiadaviek;architektonického návrhu;<correct>podrobného návrhu</correct>;implementácie a testovania súčiastok;prevádzky a údržby,stredne,,pressman
765,,V-model Dokumentovanie súčiastok,etapy_vyvoja_softveru,,Súčiastky sa dokumentujú vo fáze V-modelu:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],single-choice,implementácie a testovania súčiastok,analýzy a špecifikácie požiadaviek;architektonického návrhu;podrobného návrhu;<correct>implementácie a testovania súčiastok</correct>;prevádzky a údržby,stredne,,pressman
766,,Vodopádový model,etapy_vyvoja_softveru,,Čím je charakteristický vodopádový model životného cyklu softvéru:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,nasledujúca etapa začína po skončení predchádzajúcej,systém sa vytvára a odovdáva po častiach;systém sa vyvíja v iteráciach;využíva sa formálna špecifikácia systému;<correct>nasledujúca etapa začína po skončení predchádzajúcej</correct>,lahke,,pressman
767,,Inkrementálny model,etapy_vyvoja_softveru,,Čím je charakteristický inkrementálny (prírastkový) model životného cyklu softvéru:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,systém sa vytvára a odovzdáva po častiach,<correct>systém sa vytvára a odovzdáva po častiach</correct>;systém sa vyvíja v iteráciach;využíva sa formálna špecifikácia systému;nasledujúca etapa začína po skončení predchádzajúcej,lahke ,,pressman
768,,Itertívny model,etapy_vyvoja_softveru,,Čím je charakteristický iteratívny model životného cyklu softvéru:,životný cyklus softvéru,03 Modely životného cyklu vývoja softvéru,03.00 [Main],multi-choice,systém sa vyvíja v iteráciach;v každej interácii sa vytvorí vykonateľný výsledok,systém sa vytvára a odovzdáva po častiach;<correct>systém sa vyvíja v iteráciach</correct>;využíva sa formálna špecifikácia systému;<correct>v každej interácii sa vytvorí vykonateľný výsledok</correct>,lahke,,pressman
769,,Úlohy v softvérovom tíme,manazment,,Čo nepatrí medzi úlohy v softvérovom tíme:,manažment,12 Manažment softvérového projektu,12.00 [Main],multi-choice,zákazník,analytik;auditor na zabezpečenie kvality;podporný personál;<correct>zákazník</correct>,lahke,,pressman
770,,Softvérový projekt,softverove_inzinierstvo,,Softvérový projekt,softvérový projekt,01 Úvod do softvérového inžinierstva,01.00 [Main],single-choice,konkretizuje činnosti a poradie definované procesom,<correct>konkretizuje činnosti a poradie definované procesom</correct>;určuje abstraktnú množinu činností,lahke,,pressman
771,,Proces vývoja softvéru,etapy_vyvoja_softveru,,Čo zahrňuje proces vývoja softvéru?,životný cyklus softvéru,02 Etapy životného cyklu softvéru,02.00 [Main],single-choice,"Činnosti priamo spojené s vývojom softvéru, špecifikácia softvéru, realizácia softvéru, validácia softvéru a evolúcia softvéru.","<correct> Činnosti priamo spojené s vývojom softvéru, špecifikácia softvéru, realizácia softvéru, validácia softvéru a evolúcia softvéru.</correct>; Riadenie zmien softvérového systému, identifikácia jednotlivých verzií a konfigurácií počas jeho celého životného cyklu.; Použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu.; Zlepšovanie procesu = porozumenie existujúcim procesom a ich zmena tak, že sa zlepšia vlastnosti softvéru a/alebo sa redukujú náklady a čas na vývoj (kvalita).",stredne,,pressman
772,,Proces manažmentu softvéru,manazment_softveru,,Čo zahrňuje proces manažmentu softvéru?,manažment,11 Manažment softvéru,11.00 [Main],single-choice,"Riadenie zmien softvérového systému, identifikácia jednotlivých verzií a konfigurácií počas jeho celého životného cyklu.","Činnosti priamo spojené s vývojom softvéru, špecifikácia softvéru, realizácia softvéru, validácia softvéru a evolúcia softvéru.;<correct> Riadenie zmien softvérového systému, identifikácia jednotlivých verzií a konfigurácií počas jeho celého životného cyklu.</correct>; Použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu.; Zlepšovanie procesu = porozumenie existujúcim procesom a ich zmena tak, že sa zlepšia vlastnosti softvéru a/alebo sa redukujú náklady a čas na vývoj (kvalita).",stredne,,pressman
773,,Proces manažmentu projektu,manazment_projektu,,Čo zahrňuje proces manažmentu projektu?,manažment projektu,12 Manažment softvérového projektu,12.00 [Main],single-choice,"Použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu.","Činnosti priamo spojené s vývojom softvéru, špecifikácia softvéru, realizácia softvéru, validácia softvéru a evolúcia softvéru.; Riadenie zmien softvérového systému, identifikácia jednotlivých verzií a konfigurácií počas jeho celého životného cyklu.;<correct> Použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu.</correct>; Zlepšovanie procesu = porozumenie existujúcim procesom a ich zmena tak, že sa zlepšia vlastnosti softvéru a/alebo sa redukujú náklady a čas na vývoj (kvalita).",stredne,,pressman
774,,Proces manažmentu procesu,manazment_procesu,,Čo zahrňuje proces manažmentu procesu?,manažment,11 Manažment softvéru,11.00 [Main],single-choice,"Zlepšovanie procesu = porozumenie existujúcim procesom a ich zmena tak, že sa zlepšia vlastnosti softvéru a/alebo sa redukujú náklady a čas na vývoj (kvalita).","Činnosti priamo spojené s vývojom softvéru, špecifikácia softvéru, realizácia softvéru, validácia softvéru a evolúcia softvéru.; Riadenie zmien softvérového systému, identifikácia jednotlivých verzií a konfigurácií počas jeho celého životného cyklu.; Použitie znalostí, zručností, prostriedkov a techník na projektové činnosti s cieľom dosiahnutia (alebo prekročenia) potrieb a očakávaní projektu.;<correct> Zlepšovanie procesu = porozumenie existujúcim procesom a ich zmena tak, že sa zlepšia vlastnosti softvéru a/alebo sa redukujú náklady a čas na vývoj (kvalita).</correct>",stredne,,pressman
775,,Diagramy funkcionálnych modelov,funkcionalne_modely,,Ktoré z uvedených diagramov vizualizujú funkcionálne modely?,funkcionálny model,07 Funkcionálne modely,07.00 [Main],multi-choice,Diagram tokov údajov;Diagram prípadov použitia,<correct>Diagram tokov údajov</correct>;Diagram tried;<correct>Diagram prípadov použitia</correct>;Diagram komunikácie,stredne,,pressman
776,,Model prípadov použitia,funkcionalne_modely,,Ktoré z uvedených tvrdení ohľadom modelu prípadov použitia sú pravdivé?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,"Opisuje funkcionalitu z pohľadu používateľov;Sleduje typickú funkcionalitu systému, podsystému alebo triedy;Opisuje, čo systém robí, uvažuje všetky spôsoby použitia systému;Je súčasťou jazyka UML","<correct>Opisuje funkcionalitu z pohľadu používateľov</correct>;Identifikuje údaje, ktoré systém prijíma, s ktorými pracuje a ktoré produkuje;<correct>Sleduje typickú funkcionalitu systému, podsystému alebo triedy</correct>;Sleduje sa ako systém reaguje v čase a ako sa mení jeho správanie;<correct>Opisuje, čo systém robí, uvažuje všetky spôsoby použitia systému</correct>;<correct>Je súčasťou jazyka UML</correct>",lahke,,pressman
777,,Diagram prípadov použitia,funkcionalne_modely,,Ktoré z nasledovných entít patria do diagramov prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Prípady použitia;Hráči;Ohraničenie systému,Triedy;<correct>Prípady použitia</correct>;Komponenty systému;<correct>Hráči</correct>;Rozhrania;<correct>Ohraničenie systému</correct>,lahke,,pressman
778,,Prípad použitia,funkcionalne_modely,,Čo predstavuje prípad použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,"Entitu UML diagramu prípadov použitia;Typickú množinu scenárov, ktoré používateľ nasleduje pri použití modelovaného systému;Pomenovanú a štruktúrovaným textom opísanú typickú interakciu medzi používateľom a modelovaným systémom","<correct>Entitu UML diagramu prípadov použitia</correct>;<correct>Typickú množinu scenárov, ktoré používateľ nasleduje pri použití modelovaného systému</correct>;Pomenovanú úlohu používateľa alebo iného (externého) systému, ktorú tento hrá v modelovanom systéme;<correct>Pomenovanú a štruktúrovaným textom opísanú typickú interakciu medzi používateľom a modelovaným systémom</correct>",trivialne,,pressman
779,,Hráč,funkcionalne_modely,,Čo predstavuje hráč?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,"Entitu UML diagramu prípadov použitia;Pomenovanú úlohu používateľa alebo iného (externého) systému, ktorú tento hrá v modelovanom systéme","<correct>Entitu UML diagramu prípadov použitia</correct>;Typickú množinu scenárov, ktoré používateľ nasleduje pri použití modelovaného systému;<correct>Pomenovanú úlohu používateľa alebo iného (externého) systému, ktorú tento hrá v modelovanom systéme</correct>;Pomenovanú a štruktúrovaným textom opísanú typickú interakciu medzi používateľom a modelovaným systémom",trivialne,,pressman
780,,Hráč,funkcionalne_modely,,Čo môže predstavovať hráč v diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Používateľa;Externý systém,<correct>Používateľa</correct>;<correct>Externý systém</correct>,trivialne,,pressman
781,,Hráč,funkcionalne_modely,,Môže jeden používateľ vystupovať v roli viacerých hráčov v rámci jedného diagramu prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,single-choice,Áno,<correct>Áno</correct>;Nie,lahke,,pressman
782,,Model prípadov použitia,funkcionalne_modely,,Ktoré prípady tokov udalostí znázorňujú modely prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Normálne prípady;Výnimočné prípady;Chybové prípady,<correct>Normálne prípady</correct>;<correct>Výnimočné prípady</correct>;<correct>Chybové prípady</correct>;Fiktívne prípady,lahke,,pressman
783,,Diagram prípadov použitia,funkcionalne_modely,,Vzťahy medzi akými entitami sa môžu nachádzať v diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Medzi hráčom a prípadom použitia;Medzi dvoma prípadmi použitia;Medzi dvoma hráčmi,<correct>Medzi hráčom a prípadom použitia</correct>;Medzi hráčom a triedou;<correct>Medzi dvoma prípadmi použitia</correct>;<correct>Medzi dvoma hráčmi</correct>;Medzi dvoma triedami,lahke,,pressman
784,,Asociácia v diagrame prípadov použitia,funkcionalne_modely,,Aké entity spája asociácia v diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Hráča a prípad použitia,<correct>Hráča a prípad použitia</correct>;Dva prípady použitia;Dvoch hráčov,lahke,,pressman
785,,Zovšeobecnenie v diagrame prípadov použitia,funkcionalne_modely,,Aké entity spája zovšeobecnenie (angl. generalization) v diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Dva prípady použitia;Dvoch hráčov,Hráča a prípad použitia;<correct>Dva prípady použitia</correct>;<correct>Dvoch hráčov</correct>,lahke,,pressman
786,,Include v diagrame prípadov použitia,funkcionalne_modely,,Aké entity spája závislosť <<include>> v diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Dva prípady použitia,Hráča a prípad použitia;<correct>Dva prípady použitia</correct>;Dvoch hráčov,trivialne,,pressman
787,,Extend v diagrame prípadov použitia,funkcionalne_modely,,Aké entity spája závislosť <<extend>> v diagrame prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Dva prípady použitia,Hráča a prípad použitia;<correct>Dva prípady použitia</correct>;Dvoch hráčov,trivialne,,pressman
788,,Model prípadov použitia,funkcionalne_modely,,Na čo sa používajú modely prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Modelovanie požiadaviek na systém;Odhad času a úsilia potrebného na realizáciu systému;Stanovenie priorít realizácie systému,<correct>Modelovanie požiadaviek na systém</correct>;Určenie technickej realizácie systému a použitých technológií;Navrhnutie architektúry a komponentov systému;<correct>Odhad času a úsilia potrebného na realizáciu systému</correct>;<correct>Stanovenie priorít realizácie systému</correct>,lahke,,pressman
789,,Model prípadov použitia,funkcionalne_modely,,Na čo sa používajú modely prípadov použitia?,"diagram prípadov použitia, funkcionálny model, UML",07 Funkcionálne modely,07.01 Model a diagram prípadov použitia,multi-choice,Komunikácia s používateľmi;Odhad času a úsilia potrebného na realizáciu systému;Pri testovaní systému (metódou čiernej skrinky),<correct>Komunikácia s používateľmi</correct>;<correct>Odhad času a úsilia potrebného na realizáciu systému</correct>;Určenie technickej realizácie systému a použitých technológií;Navrhnutie architektúry a komponentov systému;<correct>Pri testovaní systému (metódou čiernej skrinky)</correct>,lahke,,pressman
790,,Model systému,modelovanie_softveru,,Čo predstavuje model systému?,modelovanie,04 Základy modelovania softvéru,04.00 [Main],multi-choice,Zjednodušenú kópiu skutočného systému,Reálnu kópiu skutočného systému;<correct>Zjednodušenú kópiu skutočného systému</correct>;Zdrojový kód systému,trivialne,,pressman
791,,Čo opisuje model,modelovanie_softveru,,Ktoré tvrdenia sú správne?,modelovanie,04 Základy modelovania softvéru,04.00 [Main],multi-choice,Model opisuje určitý aspekt systému na určitej úrovni abstrakcie,Model opisuje všetky možné aspekty systému na všetkých úrovniach abstrakcie;Kvalitný model opisuje všetky možné aspekty systému na všetkých úrovniach abstrakcie;Model opisuje určitý aspekt systému na všetkých úrovniach abstrakcie;<correct>Model opisuje určitý aspekt systému na určitej úrovni abstrakcie</correct>;Nekvalitný model opisuje určitý aspekt systému na určitej úrovni abstrakcie,stredne,,pressman
792,,Príklady modelov,modelovanie_softveru,,Ktoré z nasledovných vecí predstavujú príklady modelov?,modelovanie,04 Základy modelovania softvéru,04.00 [Main],multi-choice,Geografická mapa;Technická dokumentácia mosta;Detská železnica,<correct>Geografická mapa</correct>;Osobné auto VW Golf;<correct>Technická dokumentácia mosta</correct>;<correct>Detská železnica</correct>,lahke,,pressman
793,,Tvrdenia o modeli,modelovanie_softveru,,Ktoré z nasledovných tvrdení sú pravdivé?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Model možno ľahšie zostaviť ako skutočný systém;Model možno použiť na simulácie a tým spoznať vlastnosti entity, ktorú reprezentuje;Môžeme sa rozhodnúť, čo budeme v modeli reprezentovať (a čo zanedbáme)","<correct>Model možno ľahšie zostaviť ako skutočný systém</correct>;<correct>Model možno použiť na simulácie a tým spoznať vlastnosti entity, ktorú reprezentuje</correct>;Model môže reprezentovať iba skutočné (fyzické) entity;<correct>Môžeme sa rozhodnúť, čo budeme v modeli reprezentovať (a čo zanedbáme)</correct>",lahke,,pressman
794,,Tvrdenia o modeli,modelovanie_softveru,,Ktoré z nasledovných tvrdení sú pravdivé?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Model môže reprezentovať skutočné (fyzické) aj virtuálne entity z ľubovoľnej oblasti,Model môže reprezentovať iba skutočné (fyzické) entity z ľubovoľnej oblasti;Model môže reprezentovať iba virtuálne entity z ľubovoľnej oblasti;<correct>Model môže reprezentovať skutočné (fyzické) aj virtuálne entity z ľubovoľnej oblasti</correct>,lahke,,pressman
795,,Statický model systému,modelovanie_softveru,,Čo opisuje statický model systému?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Elementy systému a vzťahy medzi nimi,<correct>Elementy systému a vzťahy medzi nimi</correct>;Správanie sa systému v čase;Vzťahy medzi elementmi systému a ich správanie v čase,trivialne,,pressman
796,,Dynamický model systému,modelovanie_softveru,,Čo opisuje dynamický model systému?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Správanie sa systému v čase,Elementy systému a vzťahy medzi nimi;<correct>Správanie sa systému v čase</correct>;Vzťahy medzi elementmi systému a ich správanie v čase,trivialne,,pressman
797,,Klasifikácie modelov softvérových systémov,modelovanie_softveru,,Ktoré z nasledovných klasifikácií modelov softvérových systémov sú správne?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Statické modely a dynamické modely;Fyzické modely a logické modely,Matematické modely a fyzické modely;Statické modely a fyzické modely;<correct>Statické modely a dynamické modely</correct>;<correct>Fyzické modely a logické modely</correct>;Implementačné modely a testovacie modely,lahke,,pressman
798,,Tvrdenia o modeli vo fáze analýzy,modelovanie_softveru,,Ktoré z nasledovných tvrdení sú pravdivé o modeloch vo fáze analýzy?,"modelovanie, analýza požiadaviek",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Vytvárajú model problémovej oblasti,"<correct>Vytvárajú model problémovej oblasti</correct>;Modelujú softvérový systém, ktorý bude spĺňať definované požiadavky;Znázorňujú realizáciu návrhu použitím počítačových prostriedkov",lahke,,pressman
799,,Tvrdenia o modeli vo fáze návrhu,modelovanie_softveru,,Ktoré z nasledovných tvrdení sú pravdivé o modeloch vo fáze návrhu?,"modelovanie, návrh softvéru",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Modelujú softvérový systém, ktorý bude spĺňať definované požiadavky","Vytvárajú model problémovej oblasti;<correct>Modelujú softvérový systém, ktorý bude spĺňať definované požiadavky</correct>;Znázorňujú realizáciu návrhu použitím počítačových prostriedkov",lahke,,pressman
800,,Tvrdenia o modeli vo fáze implementácie,modelovanie_softveru,,Ktoré z nasledovných tvrdení sú pravdivé o modeloch vo fáze implementácie?,"modelovanie, implementácia",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Znázorňujú realizáciu návrhu použitím počítačových prostriedkov,"Vytvárajú model problémovej oblasti;Modelujú softvérový systém, ktorý bude spĺňať definované požiadavky;<correct>Znázorňujú realizáciu návrhu použitím počítačových prostriedkov</correct>",lahke,,pressman
801,,Funkcionálny model,funkcionalne_modely,,Ako je systém chápaný prostredníctvom funkcionálneho modelu?,"modelovanie, funkcionálny model",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Ako množina funkcií, resp. služieb, ktorými sa napĺňa požadovaný účel, resp. požadovaným spôsobom sa transformujú údaje","<correct>Ako množina funkcií, resp. služieb, ktorými sa napĺňa požadovaný účel, resp. požadovaným spôsobom sa transformujú údaje</correct>;Ako prostriedok na uloženie a opätovné získanie (transformovaných) údajov;Ako systém, ktorého správanie sa postupom času mení;Ako množina objektov, ktoré majú definovaný stav a správanie",stredne,,pressman
802,,Model údajov,modelovanie_softveru,,Ako je systém chápaný prostredníctvom modelu údajov?,"modelovanie, model údajov",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Ako prostriedok na uloženie a opätovné získanie (transformovaných) údajov,"Ako množina funkcií, resp. služieb, ktorými sa napĺňa požadovaný účel, resp. požadovaným spôsobom sa transformujú údaje;<correct>Ako prostriedok na uloženie a opätovné získanie (transformovaných) údajov</correct>;Ako systém, ktorého správanie sa postupom času mení;Ako množina objektov, ktoré majú definovaný stav a správanie",stredne,,pressman
803,,Model správania,modely_spravania,,Ako je systém chápaný prostredníctvom modelu správania?,"modelovanie, model správania",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Ako systém, ktorého správanie sa postupom času mení","Ako množina funkcií, resp. služieb, ktorými sa napĺňa požadovaný účel, resp. požadovaným spôsobom sa transformujú údaje;Ako prostriedok na uloženie a opätovné získanie (transformovaných) údajov;<correct>Ako systém, ktorého správanie sa postupom času mení</correct>;Ako množina objektov, ktoré majú definovaný stav a správanie",stredne,,pressman
804,,Objektový model,modelovanie_softveru,,Ako je systém chápaný prostredníctvom objektového modelu?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Ako množina objektov, ktoré majú definovaný stav a správanie","Ako množina funkcií, resp. služieb, ktorými sa napĺňa požadovaný účel, resp. požadovaným spôsobom sa transformujú údaje;Ako prostriedok na uloženie a opätovné získanie (transformovaných) údajov;Ako systém, ktorého správanie sa postupom času mení;<correct>Ako množina objektov, ktoré majú definovaný stav a správanie</correct>",stredne,,pressman
805,,Dobrý model,modelovanie_softveru,,"Čo charakterizuje ""dobrý"" model?",modelovanie,04 Základy modelovania softvéru,04.00 [Main],multi-choice,"Správne množstvo podrobností;Reprezentuje iba to a práve to, čo je dôležité pre riešenie úlohy","<correct>Správne množstvo podrobností</correct>;Detailne opisuje čo najviac aspektov reprezentovanej entity;<correct>Reprezentuje iba to a práve to, čo je dôležité pre riešenie úlohy</correct>",lahke,,pressman
806,,Dobrý jazyk na modelovanie,modelovanie_softveru,,"Ktoré vlastnosti charakterizujú ""dobrý"" jazyk na modelovanie?",modelovanie,04 Základy modelovania softvéru,04.00 [Main],multi-choice,Dostatočná vyjadrovacia sila;Jednoduchosť použitia;Jednoznačnosť;Rozšíriteľnosť,<correct>Dostatočná vyjadrovacia sila</correct>;<correct>Jednoduchosť použitia</correct>;Rozsiahla slovná zásoba;<correct>Jednoznačnosť</correct>;<correct>Rozšíriteľnosť</correct>,tazke,,pressman
807,,Model systému,modelovanie_softveru,,Čo umožňuje model systému?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Uvažovať o vlastnostiach skutočného systému bez jeho fyzického zostrojenia;Zdôrazniť dôležité funkcie a vlastnosti systému;Diskutovať zmeny a správnosť požiadaviek používateľa čo najlacnejšie a s minimálnym rizikom;Efektívne komunikovať medzi účastníkmi tvorby systému;Overiť pochopenie požiadaviek;Overiť pochopenie prostredia, v ktorom bude systému pracovať","<correct>Uvažovať o vlastnostiach skutočného systému bez jeho fyzického zostrojenia</correct>;<correct>Zdôrazniť dôležité funkcie a vlastnosti systému</correct>;<correct>Diskutovať zmeny a správnosť požiadaviek používateľa čo najlacnejšie a s minimálnym rizikom</correct>;<correct>Efektívne komunikovať medzi účastníkmi tvorby systému</correct>;<correct>Overiť pochopenie požiadaviek</correct>;<correct>Overiť pochopenie prostredia, v ktorom bude systému pracovať</correct>",lahke,,pressman
808,,Tvrdenia o modeli,modelovanie_softveru,,Ktoré z nasledovných tvrdení sú pravdivé?,modelovanie,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"Model možno ľahšie zostaviť ako skutočný systém;Model možno použiť na simulácie a tým spoznať vlastnosti entity, ktorú reprezentuje;Model sa môže vyvíjať tak, ako sa dozvedáme o probléme stále viac a viac;Môžeme sa rozhodnúť, čo budeme v modeli reprezentovať (a čo zanedbáme);Model môže reprezentovať skutočné (fyzické) alebo virtuálne entity z ľubovoľnej oblasti","<correct>Model možno ľahšie zostaviť ako skutočný systém</correct>;<correct>Model možno použiť na simulácie a tým spoznať vlastnosti entity, ktorú reprezentuje</correct>;<correct>Model sa môže vyvíjať tak, ako sa dozvedáme o probléme stále viac a viac</correct>;<correct>Môžeme sa rozhodnúť, čo budeme v modeli reprezentovať (a čo zanedbáme)</correct>;<correct>Model môže reprezentovať skutočné (fyzické) alebo virtuálne entity z ľubovoľnej oblasti</correct>",lahke,,pressman
809,,Skratka UML,modelovanie_softveru,,Čo znamená skratka UML v kontexte vývoja softvéru?,UML,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Unified Modeling Language,Ultimate Modeling Language;Ultimate Modeling Languages;<correct>Unified Modeling Language</correct>;Unified Modeling Languages,trivialne,,pressman
810,,Tvrdenia o UML,modelovanie_softveru,,Ktoré tvrdenia o UML sú pravdivé?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,UML je jazyk s presne definovanou syntaxou a sémantikou;UML je jazyk na modelovanie poskytujúci viacero typov diagramov;UML zjednocuje osvedčené modely používané najmä v objektovo-orientovanom prístupe,<correct>UML je jazyk s presne definovanou syntaxou a sémantikou</correct>;<correct>UML je jazyk na modelovanie poskytujúci viacero typov diagramov</correct>;<correct>UML zjednocuje osvedčené modely používané najmä v objektovo-orientovanom prístupe</correct>;UML zjednocuje osvedčené modely používané najmä v procedurálnom prístupe,lahke,,pressman
811,,Tvrdenia o UML,modelovanie_softveru,,Ktoré tvrdenia o UML sú pravdivé?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,UML je jazyk s presne definovanou syntaxou a sémantikou;UML je jazyk na modelovanie poskytujúci viacero typov diagramov,UML je nástroj na kreslenie diagramov;<correct>UML je jazyk s presne definovanou syntaxou a sémantikou</correct>;<correct>UML je jazyk na modelovanie poskytujúci viacero typov diagramov</correct>;UML je v súčasnosti najpoužívanejšia metodológia modelovania softvéru,stredne,,pressman
812,,Tvrdenia o UML,modelovanie_softveru,,Ktoré tvrdenia o UML sú pravdivé?,UML,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,UML nie je metóda a je jazyk,UML je metóda aj jazyk;UML je metóda a nie jazyk;<correct>UML nie je metóda a je jazyk</correct>;UML nie je metóda a nie je jazyk,stredne,,pressman
813,,Tvrdenia o UML,modelovanie_softveru,,Ktoré tvrdenia o UML sú pravdivé?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,"UML definuje sadu modelov, ktoré sa používajú v procese tvorby softvéru;UML má definovaný mechanizmus rozširovania","<correct>UML definuje sadu modelov, ktoré sa používajú v procese tvorby softvéru</correct>;UML poskytuje nástroj na tvorbu modelov, ktoré sa používajú v procese tvorby softvéru;UML definuje spôsob vytvárania jednotlivých modelov, resp. diagramov;<correct>UML má definovaný mechanizmus rozširovania</correct>;UML nemá definovaný mechanizmus rozširovania",lahke,,pressman
814,,Rožšírenie UML,modelovanie_softveru,,Pomocou akých elementov je možné rozširovať jazyk UML?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Stereotypy;Ohraničenia (constraints);Označené hodnoty (angl. tagged values),<correct>Stereotypy</correct>;Triedy (angl. classes);Prípady použitia (angl. use cases);<correct>Ohraničenia (constraints)</correct>;Činnosti (angl. activities);<correct>Označené hodnoty (angl. tagged values)</correct>;Jazyk UML nemožno rozširovať,stredne,,pressman
815,,Rozšírenie UML,modelovanie_softveru,,Je možné jazyk UML rozširovať?,UML,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,Áno,<correct>Áno</correct>;Nie,lahke,,pressman
816,,Tvrdenia o UML,modelovanie_softveru,,Ktoré tvrdenia o UML diagramoch sú pravdivé?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Diagram je grafickou prezentáciou (vizualizáciou) modelu systému;Každý typ diagramu môže poskytnúť rôzny pohľad na ten istý systém alebo časť systému,Diagram predstavuje model systému alebo jeho časť;<correct>Diagram je grafickou prezentáciou (vizualizáciou) modelu systému</correct>;Každý typ diagramu poskytuje jeden pohľad na ten istý systém alebo časť systému;<correct>Každý typ diagramu môže poskytnúť rôzny pohľad na ten istý systém alebo časť systému</correct>,stredne,,pressman
817,,UML diagram,modelovanie_softveru,,Z čoho pozostáva každý UML diagram?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Z entít;Zo vzťahov medzi entitami,<correct>Z entít</correct>;Z poddiagramov;Z modelov systému;<correct>Zo vzťahov medzi entitami</correct>;Zo vzťahov medzi poddiagramami;Zo vzťahov medzi modelmi systému,lahke,,pressman
818,,UML diagram Entity,modelovanie_softveru,,Čo predstavujú entity v UML diagrame?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Základné stavebné elementy diagramu,<correct>Základné stavebné elementy diagramu</correct>;Rozšírenia diagramu;Ohraničenia diagramu;Typy súvislostí medzi elementmi diagramu,trivialne,,pressman
819,,UML diagram Vzťahy,modelovanie_softveru,,Čo predstavujú vzťahy (angl. relationships) v UML diagrame?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Typy súvislostí medzi elementmi diagramu,Základné stavebné elementy diagramu;Rozšírenia diagramu;Ohraničenia diagramu;<correct>Typy súvislostí medzi elementmi diagramu</correct>,trivialne,,pressman
820,,Entity v UML diagramoch,modelovanie_softveru,,Ktoré z nasledovných UML elementov predstavujú entity v diagramoch?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Triedy;Komponenty;Prípady použitia,<correct>Triedy</correct>;Asociácie;Kompozície;Zovšeobecnenia;<correct>Komponenty</correct>;<correct>Prípady použitia</correct>;Stereotypy,lahke,,pressman
821,,Vzťahy v UML diagramoch,modelovanie_softveru,,Ktoré z nasledovných UML elementov predstavujú vzťahy (angl. relationships) v diagramoch?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Asociácie;Kompozície;Zovšeobecnenia,Triedy;<correct>Asociácie</correct>;<correct>Kompozície</correct>;<correct>Zovšeobecnenia</correct>;Komponenty;Prípady použitia;Stereotypy,lahke,,pressman
822,,Počet typov UML diagramov,modelovanie_softveru,,Koľko rôznych typov diagramov definuje UML verzia 2.x?,UML,06 Prehľad modelovania softvéru,06.00 [Main],single-choice,13,5;7;9;11;<correct>13</correct>,lahke,,pressman
823,,Delenie UML diagramov,modelovanie_softveru,,Aké sú korektné delenia UML diagramov?,UML,06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Statické diagramy a dynamické diagramy;Štruktúrne diagramy a diagramy správania,<correct>Statické diagramy a dynamické diagramy</correct>;Statické diagramy a štruktúrne diagramy;Štruktúrne diagramy a dynamické diagramy;<correct>Štruktúrne diagramy a diagramy správania</correct>,tazke,,pressman
824,,Štruktúrne diagramy,strukturne_modely,,Ktoré z nasledovných UML diagramov predstavujú štruktúrne diagramy?,"UML, štruktúrny diagram",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Diagram tried (angl. class diagram);Diagram objektov (angl. object diagram);Diagram komponentov (angl. component diagram);Diagram rozmiestnenia (angl. deployment diagram),Diagram komunikácie (angl. communication diagram);<correct>Diagram tried (angl. class diagram)</correct>;Diagram prípadov použitia (angl. use case diagram);<correct>Diagram objektov (angl. object diagram)</correct>;<correct>Diagram komponentov (angl. component diagram)</correct>;Stavový diagram (angl. state machine diagram);<correct>Diagram rozmiestnenia (angl. deployment diagram)</correct>;Diagram činností (angl. activity diagram);Sekvenčný diagram (angl. sequence diagram),lahke,,pressman
825,,Diagramy správania,modely_spravania,,Ktoré z nasledovných UML diagramov predstavujú diagramy správania?,"UML, diagram správania",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Diagram komunikácie (angl. communication diagram);Diagram prípadov použitia (angl. use case diagram);Stavový diagram (angl. state machine diagram);Diagram činností (angl. activity diagram);Sekvenčný diagram (angl. sequence diagram),<correct>Diagram komunikácie (angl. communication diagram)</correct>;Diagram tried (angl. class diagram);<correct>Diagram prípadov použitia (angl. use case diagram)</correct>;Diagram objektov (angl. object diagram);Diagram komponentov (angl. component diagram);<correct>Stavový diagram (angl. state machine diagram)</correct>;Diagram rozmiestnenia (angl. deployment diagram);<correct>Diagram činností (angl. activity diagram)</correct>;<correct>Sekvenčný diagram (angl. sequence diagram)</correct>,stredne,,pressman
826,,Interakčné diagramy,modelovanie_softveru,,Ktoré z nasledovných UML diagramov predstavujú interakčné diagramy?,"UML, interakčný diagram",06 Prehľad modelovania softvéru,06.00 [Main],multi-choice,Diagram komunikácie (angl. communication diagram);Sekvenčný diagram (angl. sequence diagram),<correct>Diagram komunikácie (angl. communication diagram)</correct>;Diagram tried (angl. class diagram);Diagram prípadov použitia (angl. use case diagram);Diagram objektov (angl. object diagram);Diagram komponentov (angl. component diagram);Stavový diagram (angl. state machine diagram);Diagram rozmiestnenia (angl. deployment diagram);Diagram činností (angl. activity diagram);<correct>Sekvenčný diagram (angl. sequence diagram)</correct>,stredne,,pressman